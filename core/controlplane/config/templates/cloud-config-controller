{{ define "instance" -}}
{{- $S3URI := self.Parts.s3.Asset.S3URL -}}
#!/bin/bash -xe
 . /etc/environment
export COREOS_PRIVATE_IPV4 COREOS_PRIVATE_IPV6 COREOS_PUBLIC_IPV4 COREOS_PUBLIC_IPV6
REGION=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document | jq -r '.region')
USERDATA_FILE=userdata-controller
while ! /usr/bin/rkt run \
   --net=host \
   --volume=dns,kind=host,source=/etc/resolv.conf,readOnly=true --mount volume=dns,target=/etc/resolv.conf  \
   --volume=awsenv,kind=host,source=/var/run/coreos,readOnly=false --mount volume=awsenv,target=/var/run/coreos \
   --trust-keys-from-https \
   {{.AWSCliImage.Options}}{{.AWSCliImage.RktRepo}} --exec=aws -- s3 --region $REGION  cp {{$S3URI}} /var/run/coreos/$USERDATA_FILE; do
  sleep 1
done
exec /usr/bin/coreos-cloudinit --from-file /var/run/coreos/$USERDATA_FILE
{{ end }}
{{ define "s3" -}}
#cloud-config
coreos:
  update:
    reboot-strategy: "off"
  flannel:
    interface: $private_ipv4
    etcd_cafile: /etc/kubernetes/ssl/etcd-trusted-ca.pem
    etcd_certfile: /etc/kubernetes/ssl/etcd-client.pem
    etcd_keyfile: /etc/kubernetes/ssl/etcd-client-key.pem

  units:
{{/* RUN-509 Remove vault-based certs */}}
    - name: refresh-sa-secret.service
      enable: true
      command: start
      content: |
        [Unit]
        Description=Generates and updates ServiceAccount keys
        After=bootstrap-serviceaccount-key.service kubelet.service network-online.target
        Wants=kubelet.service

        [Service]
        Type=simple
        Restart=on-failure
        RestartSec=30
        # keys expire every 30 days
        Environment=KEY_EXPIRE_PERIOD_SEC=2592000
        # attempt to renew keys 5 days before expire time
        Environment=KEY_RENEW_THRESHOLD_SEC=432000
        ExecStartPre=/usr/bin/systemctl is-active kubelet
        ExecStartPre=/opt/bin/refresh-sa-secret /etc/kubernetes/ssl/serviceaccount-key.pem.latest
        ExecStart=/bin/true

        [Install]
        WantedBy=multi-user.target

    - name: refresh-sa-secret.timer
      enable: true
      command: start
      content: |
        [Timer]
        OnUnitInactiveSec=10m

    - name: bootstrap-serviceaccount-key.service
      enable: true
      command: start
      content: |
        [Unit]
        # This key is actually never used to create ServiceAccount secret, because
        # SA secret creation is done in controller-manager which will be failing to start
        # until serviceaccount-key.pem.controller is created by 'handler-sa-key-update.service'
        # So whole purpose of this file is to allow APIserver to start and let `refresh-sa-secret.service`
        # to do it's job
        Description=Creates initial SA key to allow apiserver to start on first boot
        Before=kubelet.service
        Requires=network-online.target

        [Service]
        Type=oneshot
        ExecStartPre=/usr/bin/mkdir -p /etc/kubernetes/ssl
        ExecStart=/bin/sh -ec '[ -f /etc/kubernetes/ssl/serviceaccount-key.pem.apiserver ] || openssl ecparam -name prime256v1 -genkey -out /etc/kubernetes/ssl/serviceaccount-key.pem.apiserver'
        [Install]
        WantedBy=kubelet.service

    - name: handler-sa-key-update.service
      enable: true
      content: |
        [Unit]
        Description=Restart APIServer and ControllerManager if ServiceAccount key was updated
        After=kubelet.service

        [Service]
        Environment=SAKEY=/etc/kubernetes/ssl/serviceaccount-key.pem
        Type=simple
        Restart=on-failure
        RestartSec=15
        ExecStartPre=/bin/sh -ec 'cmp ${SAKEY}.apiserver ${SAKEY}.latest || \
           { cp ${SAKEY}.latest ${SAKEY}.apiserver; docker ps --filter name='k8s_kube-apiserver*' -q | xargs --no-run-if-empty docker rm -f; }'
        ExecStartPre=/bin/sh -ec 'cmp ${SAKEY}.controller ${SAKEY}.latest || \
           { cp ${SAKEY}.latest ${SAKEY}.controller; docker ps --filter name='k8s_kube-controller-manager*' -q | xargs --no-run-if-empty docker rm -f; }'
        ExecStart=/bin/true

        [Install]
        WantedBy=multi-user.target

    - name: handler-sa-key-update.path
      enable: true
      command: start
      content: |
        [Path]
        PathChanged=/etc/kubernetes/ssl/serviceaccount-key.pem.latest
{{/* RUN-509 Remove vault-based certs */}}
{{- range $u := .Controller.CustomSystemdUnits}}
    - name: {{$u.Name}}
      {{- if $u.Command }}
      command: {{ $u.Command }}
      {{- end}}
      {{- if $u.Enable }}
      enable: {{ $u.Enable }}
      {{- end }}
      {{- if $u.Runtime }}
      runtime: {{ $u.Runtime }}
      {{- end }}
      {{- if $u.DropInsPresent }}
      drop-ins:
        {{- range $d := $u.DropIns }}
        - name: {{ $d.Name }}
          content: |
            {{- range $i := $d.ContentArray }}
            {{ $i }}
            {{- end}}
        {{- end }}
      {{- end}}
      {{- if $u.ContentPresent }}
      content: |
        {{- range $l := $u.ContentArray}}
        {{ $l }}
        {{- end }}
      {{- end }}
{{- end}}
    - name: systemd-modules-load.service
      command: restart
{{if and (.AmazonSsmAgent.Enabled) (ne .AmazonSsmAgent.DownloadUrl "")}}
    - name: amazon-ssm-agent.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=amazon-ssm-agent
        Requires=network-online.target
        After=network-online.target

        [Service]
        Type=simple
        ExecStartPre=/opt/ssm/bin/install-ssm-agent.sh
        ExecStart=/opt/ssm/bin/amazon-ssm-agent
        KillMode=controll-group
        Restart=on-failure
        RestartSec=1min

        [Install]
        WantedBy=network-online.target
{{end}}
{{if .CloudWatchLogging.Enabled}}
    - name: journald-cloudwatch-logs.service
      command: start
      content: |
        [Unit]
        Description=Docker run journald-cloudwatch-logs to send journald logs to CloudWatch
        Requires=network-online.target
        After=network-online.target

        [Service]
        ExecStartPre=-/usr/bin/mkdir -p /var/journald-cloudwatch-logs
        ExecStart=/usr/bin/rkt run \
                  --insecure-options=image \
                  --volume resolv,kind=host,source=/etc/resolv.conf,readOnly=true \
                  --mount volume=resolv,target=/etc/resolv.conf \
                  --volume journald-cloudwatch-logs,kind=host,source=/var/journald-cloudwatch-logs \
                  --mount volume=journald-cloudwatch-logs,target=/var/journald-cloudwatch-logs \
                  --volume journal,kind=host,source=/var/log/journal,readOnly=true \
                  --mount volume=journal,target=/var/log/journal \
                  --volume machine-id,kind=host,source=/etc/machine-id,readOnly=true \
                  --mount volume=machine-id,target=/etc/machine-id \
                  --uuid-file-save=/var/journald-cloudwatch-logs/journald-cloudwatch-logs.uuid \
                  {{ .JournaldCloudWatchLogsImage.RktRepo }} -- {{.ClusterName}}
        ExecStopPost=/usr/bin/rkt rm --uuid-file=/var/journald-cloudwatch-logs/journald-cloudwatch-logs.uuid
        Restart=always
        RestartSec=60s

        [Install]
        WantedBy=multi-user.target
{{end}}
    - name: cfn-etcd-environment.service
      enable: true
      command: start
      runtime: true
      content: |
        [Unit]
        Description=Fetches etcd static IP addresses list from CF
        After=network-online.target

        [Service]
        Restart=on-failure
        RemainAfterExit=true
        ExecStartPre=/opt/bin/cfn-etcd-environment
        ExecStart=/usr/bin/mv -f /var/run/coreos/etcd-environment /etc/etcd-environment

{{if .Experimental.AwsEnvironment.Enabled}}
    - name: set-aws-environment.service
      enable: true
      command: start
      runtime: true
      content: |
        [Unit]
        Description=Set AWS environment variables in /etc/aws-environment
        After=network-online.target

        [Service]
        Type=oneshot
        RemainAfterExit=true
        ExecStartPre=/bin/touch /etc/aws-environment
        ExecStart=/opt/bin/set-aws-environment
{{end}}
    - name: docker.service
      drop-ins:
{{if .Experimental.EphemeralImageStorage.Enabled}}
        - name: 10-docker-mount.conf
          content: |
            [Unit]
            After=var-lib-docker.mount
            Wants=var-lib-docker.mount
{{end}}
        - name: 10-post-start-check.conf
          content: |
            [Service]
            RestartSec=10
            ExecStartPost=/usr/bin/docker pull {{.PauseImage.RepoWithTag}}

        - name: 40-flannel.conf
          content: |
            [Unit]
            Wants=flanneld.service
            [Service]
            EnvironmentFile=/etc/kubernetes/cni/docker_opts_cni.env
            ExecStartPre=/usr/bin/systemctl is-active flanneld.service

        - name: 60-logfilelimit.conf
          content: |
            [Service]
            Environment="DOCKER_OPTS=--log-opt max-size=50m --log-opt max-file=3"

    - name: flanneld.service
      drop-ins:
        - name: 10-etcd.conf
          content: |
            [Unit]
            Wants=cfn-etcd-environment.service
            After=cfn-etcd-environment.service

            [Service]
            EnvironmentFile=-/etc/etcd-environment
            Environment="ETCD_SSL_DIR=/etc/kubernetes/ssl"
            EnvironmentFile=-/run/flannel/etcd-endpoints.opts
            ExecStartPre=/usr/bin/systemctl is-active cfn-etcd-environment.service
            ExecStartPre=/bin/sh -ec "echo FLANNELD_ETCD_ENDPOINTS=${ETCD_ENDPOINTS} >/run/flannel/etcd-endpoints.opts"
            {{- if .AssetsEncryptionEnabled }}
            ExecStartPre=/opt/bin/decrypt-assets
            {{- end}}
            ExecStartPre=/usr/bin/etcdctl \
            --ca-file=/etc/kubernetes/ssl/etcd-trusted-ca.pem \
            --cert-file=/etc/kubernetes/ssl/etcd-client.pem \
            --key-file=/etc/kubernetes/ssl/etcd-client-key.pem \
            --endpoints="${ETCD_ENDPOINTS}" \
            set /coreos.com/network/config '{"Network" : "{{.PodCIDR}}", "Backend" : {"Type" : "vxlan"}}'
            TimeoutStartSec=120

{{if .FlannelImage.RktPullDocker}}
        - name: 20-flannel-custom-image.conf
          content: |
            [Unit]
            PartOf=flanneld.service
            Before=docker.service

            [Service]
            Environment="FLANNEL_IMAGE={{.FlannelImage.RktRepo}}"
            Environment="RKT_RUN_ARGS={{.FlannelImage.Options}}"

    - name: flannel-docker-opts.service
      drop-ins:
        - name: 10-flannel-docker-options.conf
          content: |
            [Unit]
            PartOf=flanneld.service
            Before=docker.service

            [Service]
            Environment="FLANNEL_IMAGE={{.FlannelImage.RktRepo}}"
            Environment="RKT_RUN_ARGS={{.FlannelImage.Options}} --uuid-file-save=/var/lib/coreos/flannel-wrapper2.uuid"
{{end}}
    - name: kubelet.service
      command: start
      runtime: true
      content: |
        [Unit]
        Wants=flanneld.service cfn-etcd-environment.service
        After=cfn-etcd-environment.service
        [Service]
        # EnvironmentFile=/etc/environment allows the reading of COREOS_PRIVATE_IPV4
        EnvironmentFile=/etc/environment
        EnvironmentFile=-/etc/etcd-environment
        Environment=KUBELET_IMAGE_TAG={{.K8sVer}}
        Environment=KUBELET_IMAGE_URL={{ .HyperkubeImage.RktRepoWithoutTag }}
        Environment="RKT_RUN_ARGS=--volume dns,kind=host,source=/etc/resolv.conf {{.HyperkubeImage.Options}}\
        --set-env=ETCD_CA_CERT_FILE=/etc/kubernetes/ssl/etcd-trusted-ca.pem \
        --set-env=ETCD_CERT_FILE=/etc/kubernetes/ssl/etcd-client.pem \
        --set-env=ETCD_KEY_FILE=/etc/kubernetes/ssl/etcd-client-key.pem \
        --mount volume=dns,target=/etc/resolv.conf \
        {{ if eq .ContainerRuntime "rkt" -}}
        --volume rkt,kind=host,source=/opt/bin/host-rkt \
        --mount volume=rkt,target=/usr/bin/rkt \
        --volume var-lib-rkt,kind=host,source=/var/lib/rkt \
        --mount volume=var-lib-rkt,target=/var/lib/rkt \
        --volume stage,kind=host,source=/tmp \
        --mount volume=stage,target=/tmp \
        {{ end -}}
        --volume var-lib-cni,kind=host,source=/var/lib/cni \
        --mount volume=var-lib-cni,target=/var/lib/cni \
        --volume var-log,kind=host,source=/var/log \
        --mount volume=var-log,target=/var/log{{ if .UseCalico }} \
        --volume cni-bin,kind=host,source=/opt/cni/bin \
        --mount volume=cni-bin,target=/opt/cni/bin{{ end }} \
        --volume etc-kubernetes,kind=host,source=/etc/kubernetes \
        --mount volume=etc-kubernetes,target=/etc/kubernetes"
        ExecStartPre=/usr/bin/systemctl is-active flanneld.service
        ExecStartPre=/usr/bin/systemctl is-active cfn-etcd-environment.service
        ExecStartPre=/usr/bin/mkdir -p /var/lib/cni
        ExecStartPre=/usr/bin/mkdir -p /var/log/containers
        ExecStartPre=/usr/bin/mkdir -p /opt/cni/bin
        ExecStartPre=/usr/bin/mkdir -p /etc/kubernetes/manifests
        ExecStartPre=/usr/bin/etcdctl \
                       --ca-file /etc/kubernetes/ssl/etcd-trusted-ca.pem \
                       --key-file /etc/kubernetes/ssl/etcd-client-key.pem \
                       --cert-file /etc/kubernetes/ssl/etcd-client.pem \
                       --endpoints "${ETCD_ENDPOINTS}" \
                       cluster-health

        ExecStartPre=/bin/sh -ec "find /etc/kubernetes/manifests /srv/kubernetes/manifests  -maxdepth 1 -type f | xargs --no-run-if-empty sed -i 's|#ETCD_ENDPOINTS#|${ETCD_ENDPOINTS}|'"
        {{if .UseCalico -}}
        ExecStartPre=/bin/sh -ec "find /etc/kubernetes/cni/net.d/ -maxdepth 1 -type f | xargs --no-run-if-empty sed -i 's|#ETCD_ENDPOINTS#|${ETCD_ENDPOINTS}|'"
        ExecStartPre=/usr/bin/docker run --rm -e SLEEP=false -e KUBERNETES_SERVICE_HOST= -e KUBERNETES_SERVICE_PORT= -v /opt/cni/bin:/host/opt/cni/bin {{ .CalicoCniImage.RepoWithTag }} /install-cni.sh
        {{end -}}
        ExecStart=/usr/lib/coreos/kubelet-wrapper \
        --kubeconfig=/etc/kubernetes/kubeconfig/controller.yaml \
        --require-kubeconfig \
        --cni-conf-dir=/etc/kubernetes/cni/net.d \
        {{/* Work-around until https://github.com/kubernetes/kubernetes/issues/43967 is fixed via https://github.com/kubernetes/kubernetes/pull/43995 */ -}}
        --cni-bin-dir=/opt/cni/bin \
        --network-plugin={{.K8sNetworkPlugin}} \
        --container-runtime={{.ContainerRuntime}} \
        --rkt-path=/usr/bin/rkt \
        --rkt-stage1-image=coreos.com/rkt/stage1-coreos \
        --node-labels node-role.kubernetes.io/master{{if .NodeLabels.Enabled}},{{.NodeLabels.String}} \
        {{end}} \
        --register-with-taints=node.alpha.kubernetes.io/role=master:NoSchedule \
        --allow-privileged=true \
        --pod-manifest-path=/etc/kubernetes/manifests \
        {{ if .KubeDns.NodeLocalResolver }}--cluster-dns=${COREOS_PRIVATE_IPV4} \
        {{ else }}--cluster-dns={{.DNSServiceIP}} \
        {{ end }}--cluster-domain=cluster.local \
        --cloud-provider=aws \
        $KUBELET_OPTS
        Restart=always
        RestartSec=10

        [Install]
        WantedBy=multi-user.target

{{ if eq .ContainerRuntime "rkt" }}
    - name: rkt-api.service
      enable: true
      content: |
        [Unit]
        Before=kubelet.service
        [Service]
        ExecStart=/usr/bin/rkt api-service
        Restart=always
        RestartSec=10
        [Install]
        RequiredBy=kubelet.service

    - name: load-rkt-stage1.service
      enable: true
      content: |
        [Unit]
        Description=Load rkt stage1 images
        Documentation=http://github.com/coreos/rkt
        Requires=network-online.target
        After=network-online.target
        Before=rkt-api.service
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/bin/rkt fetch /usr/lib/rkt/stage1-images/stage1-coreos.aci /usr/lib/rkt/stage1-images/stage1-fly.aci  --insecure-options=image
        [Install]
        RequiredBy=rkt-api.service
{{ end }}

    - name: install-kube-system.service
      command: start
      runtime: true
      content: |
        [Unit]
        Wants=kubelet.service docker.service

        [Service]
        Type=oneshot
        StartLimitInterval=0
        RemainAfterExit=true
        ExecStartPre=/usr/bin/bash -c "until /usr/bin/systemctl is-active kubelet.service; do echo waiting until kubelet starts; sleep 10; done"
        ExecStartPre=/usr/bin/bash -c "until /usr/bin/systemctl is-active docker.service; do echo waiting until docker starts; sleep 10; done"
        ExecStartPre=/usr/bin/bash -c "until /usr/bin/curl -s -f http://127.0.0.1:8080/version; do echo waiting until apiserver starts; sleep 10; done"
        ExecStart=/opt/bin/retry 3 /opt/bin/install-kube-system

    - name: apply-kube-aws-plugins.service
      command: start
      runtime: true
      content: |
        [Unit]
        Requires=install-kube-system.service
        After=install-kube-system.service

        [Service]
        Type=oneshot
        StartLimitInterval=0
        RemainAfterExit=true
        ExecStart=/opt/bin/retry 3 /opt/bin/apply-kube-aws-plugins

{{ if $.ElasticFileSystemID }}
    - name: rpc-statd.service
      command: start
      enable: true
    - name: efs.service
      command: start
      content: |
        [Unit]
        After=network-online.target
        Before=kubelet.service
        [Service]
        Type=oneshot
        ExecStartPre=-/usr/bin/mkdir -p /efs
        ExecStart=/bin/sh -c 'grep -qs /efs /proc/mounts || /usr/bin/mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 $(/usr/bin/curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone).{{ $.ElasticFileSystemID }}.efs.{{ $.Region }}.amazonaws.com:/ /efs'
        ExecStop=/usr/bin/umount /efs
        RemainAfterExit=yes
        [Install]
        WantedBy=kubelet.service
{{ end }}
{{if .WaitSignal.Enabled}}
    - name: cfn-signal.service
      command: start
      content: |
        [Unit]
        Wants=kubelet.service docker.service install-kube-system.service apply-kube-aws-plugins.service
        After=kubelet.service install-kube-system.service apply-kube-aws-plugins.service

        [Service]
        Type=simple
        Restart=on-failure
        RestartSec=60
        StartLimitInterval=640
        StartLimitBurst=10
        ExecStartPre=/usr/bin/systemctl is-active install-kube-system.service
        ExecStartPre=/usr/bin/systemctl is-active apply-kube-aws-plugins.service
        ExecStartPre=/usr/bin/bash -c "while sleep 1; do if /usr/bin/curl -s -m 20 -f  http://127.0.0.1:8080/healthz > /dev/null &&  /usr/bin/curl -s -m 20 -f  http://127.0.0.1:10252/healthz > /dev/null && /usr/bin/curl -s -m 20 -f  http://127.0.0.1:10251/healthz > /dev/null &&  /usr/bin/curl --insecure -s -m 20 -f  https://127.0.0.1:10250/healthz > /dev/null && /usr/bin/curl -s -m 20 -f http://127.0.0.1:10256/healthz > /dev/null; then break ; fi;  done"
        {{ if .UseCalico }}
        ExecStartPre=/usr/bin/bash -c "until /usr/bin/docker run --net=host --pid=host --rm {{ .CalicoCtlImage.RepoWithTag }} node status > /dev/null; do sleep 3; done && echo Calico running"
        {{ end }}
        {{if .Experimental.AuditLog.Enabled -}}
        ExecStartPre=/opt/bin/check-worker-communication
        {{end -}}
        ExecStart=/opt/bin/cfn-signal
{{end}}
{{if .Experimental.AwsNodeLabels.Enabled }}
    - name: kube-node-label.service
      enable: true
      command: start
      runtime: true
      content: |
        [Unit]
        Description=Label this kubernetes node with additional AWS parameters
        Wants=kubelet.service
        After=kubelet.service
        Before=cfn-signal.service

        [Service]
        Type=oneshot
        ExecStop=/bin/true
        RemainAfterExit=true
        ExecStartPre=/bin/sh -c "/usr/bin/systemctl set-environment INSTANCE_ID=$(/usr/bin/curl -s http://169.254.169.254/latest/meta-data/instance-id)"
        ExecStartPre=/bin/sh -c "/usr/bin/systemctl set-environment SECURITY_GROUPS=\"$(/usr/bin/curl -s http://169.254.169.254/latest/meta-data/security-groups | tr '\n' ',')\""
        ExecStartPre=/bin/sh -c "/usr/bin/systemctl set-environment AUTOSCALINGGROUP=\"$(/usr/bin/docker run --rm --net=host \
          {{.AWSCliImage.RepoWithTag}} aws \
          autoscaling describe-auto-scaling-instances \
          --instance-ids ${INSTANCE_ID} --region {{.Region}} \
          --query 'AutoScalingInstances[].AutoScalingGroupName' --output text)\""
        ExecStartPre=/bin/sh -c "/usr/bin/systemctl set-environment \
          LAUNCHCONFIGURATION=\"$(/usr/bin/docker run --rm --net=host \
          {{.AWSCliImage.RepoWithTag}} \
          aws autoscaling describe-auto-scaling-groups \
          --auto-scaling-group-name $AUTOSCALINGGROUP --region {{.Region}} \
          --query 'AutoScalingGroups[].LaunchConfigurationName' --output text)\""
        ExecStartPre=/usr/bin/bash -c "until /usr/bin/curl -s -f http://127.0.0.1:8080/version; do echo waiting until apiserver starts; sleep 1; done"
        ExecStart=/bin/sh -c "/usr/bin/curl \
          --retry 3 \
          --request PATCH \
          -H 'Content-Type: application/strategic-merge-patch+json' \
          -d'{ \
          \"metadata\": { \
            \"labels\": { \
              \"kube-aws.coreos.com/autoscalinggroup\": \"${AUTOSCALINGGROUP}\", \
              \"kube-aws.coreos.com/launchconfiguration\": \"${LAUNCHCONFIGURATION}\" \
            }, \
            \"annotations\": { \
              \"kube-aws.coreos.com/securitygroups\": \"${SECURITY_GROUPS}\" \
            } \
          } \
          }\"' \
          http://localhost:8080/api/v1/nodes/$(hostname)"
{{end}}

{{if .Experimental.EphemeralImageStorage.Enabled}}
    - name: format-ephemeral.service
      command: start
      content: |
        [Unit]
        Description=Formats the ephemeral drive
        ConditionFirstBoot=yes
        After=dev-{{.Experimental.EphemeralImageStorage.Disk}}.device
        Requires=dev-{{.Experimental.EphemeralImageStorage.Disk}}.device
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/sbin/wipefs -f /dev/{{.Experimental.EphemeralImageStorage.Disk}}
        ExecStart=/usr/sbin/mkfs.{{.Experimental.EphemeralImageStorage.Filesystem}} -f /dev/{{.Experimental.EphemeralImageStorage.Disk}}
    - name: var-lib-docker.mount
      command: start
      content: |
        [Unit]
        Description=Mount ephemeral to /var/lib/docker
        Requires=format-ephemeral.service
        After=format-ephemeral.service
        [Mount]
        What=/dev/{{.Experimental.EphemeralImageStorage.Disk}}
{{if eq .ContainerRuntime "docker"}}
        Where=/var/lib/docker
{{else if eq .ContainerRuntime "rkt"}}
        Where=/var/lib/rkt
{{end}}
        Type={{.Experimental.EphemeralImageStorage.Filesystem}}
{{end}}
{{ if .SharedPersistentVolume }}
    - name: load-efs-pv.service
      command: start
      content: |
        [Unit]
        Description=Load efs persistent volume mount
        Wants=kubelet.service
        After=kubelet.service
        Before=cfn-signal.service
        [Service]
        Type=simple
        RemainAfterExit=true
        RestartSec=10
        Restart=on-failure
        ExecStartPre=/opt/bin/set-efs-pv
        ExecStart=/opt/bin/load-efs-pv
{{end}}

{{if .SSHAuthorizedKeys}}
ssh_authorized_keys:
  {{range $sshkey := .SSHAuthorizedKeys}}
  - {{$sshkey}}
  {{end}}
{{end}}

{{if .Region.IsChina}}
    - name: pause-amd64.service
      enable: true
      command: start
      runtime: true
      content: |
        [Unit]
        Description=Pull and tag a mirror image for pause-amd64
        Wants=docker.service
        After=docker.service

        [Service]
        Restart=on-failure
        RemainAfterExit=true
        ExecStartPre=/usr/bin/systemctl is-active docker.service
        ExecStartPre=/usr/bin/docker pull {{.PauseImage.RepoWithTag}}
        ExecStart=/usr/bin/docker tag {{.PauseImage.RepoWithTag}} gcr.io/google_containers/pause-amd64:3.0
        ExecStop=/bin/true
        [Install]
        WantedBy=install-kube-system.service
{{end}}
write_files:
  - path: /etc/ssh/sshd_config
    permissions: 0600
    owner: root:root
    content: |
      UsePrivilegeSeparation sandbox
      Subsystem sftp internal-sftp
      ClientAliveInterval 180
      UseDNS no
      UsePAM yes
      PrintLastLog no # handled by PAM
      PrintMotd no # handled by PAM
      PasswordAuthentication no
      ChallengeResponseAuthentication no
{{/* RUN-509 Remove vault-based certs */}}
  - path: /opt/bin/refresh-sa-secret
    permissions: 0755
    content: |
      #!/bin/bash
      set -ue

      # Script tries to coordinate secret update/creation among multiple independend nodes. Only coordination
      # primitive it is using is `kubectl create` which is assumed to be atomic and race-free (==
      # if simultaneous `kubectl create` commands issued, only one can possibly return success)

      # Script need to be careful to maintain following MUST HAVE properties:
      #  1. Every cert written to secrets must stay there and never overwriten by a new one.
      #     So if we have 2 active certs [A,B], there can never be update [A,B,C], followed up
      #     with [A,B,C']. If that happens, "C" cert, no matter how little time it
      #     stayed in secrets, can possibly be used to generate service account tokens, therefore
      #     overwriting it with "C'" would break all pods which were started
      #

      : ${LOCK_EXPIRE_TIMEOUT_SECONDS:=20}  # maximum time any operation under lock can take
      : ${KEY_EXPIRE_PERIOD_SEC:=$(( 60*60*24*30 ))} # 30 days
      : ${KEY_RENEW_THRESHOLD_SEC:=$(( $KEY_EXPIRE_PERIOD_SEC/2 ))}  # time left before expire, when to attempt key renew
      KEY_EXPIRE_THRESHOLD_SECONDS=$(( KEY_EXPIRE_PERIOD_SEC - KEY_RENEW_THRESHOLD_SEC ))
      UPDATE_OPERATION_TIMEOUT=$(( LOCK_EXPIRE_TIMEOUT_SECONDS / 2 ))

      P=serviceaccount-keys

      # produces secret resource definition. .
      # second argument is optional and goes into 'data' field and must be a string value
      secret() {
        if (( $# > 1 )); then
            T=$(mktemp /tmp/sakey/tmp.XXXXXXX)
            echo "$2" >$T
            kubectl --namespace=kube-system create secret generic "$1" --from-file="keypairs=$T" --dry-run -o json
            rm $T
        else
            kubectl --namespace=kube-system create secret generic "$1" --dry-run -o json
        fi
      }

      kubectl() {
        docker run --rm -i --net=host -v /tmp/sakey:/tmp/sakey -v /etc/kubernetes:/etc/kubernetes:ro -v /etc/resolv.conf:/etc/resolv.conf:ro {{.HyperkubeImage.RepoWithTag}} /kubectl "$@"
      }

      log() { >&2 echo "$@"; }

      gen_new_key() { openssl ecparam -name prime256v1 -genkey -noout; }
      get_key() { kubectl --namespace=kube-system get -o json secret "$1"; }
      init_key() { secret "$P" '[]' | kubectl --namespace=kube-system create -f -; }


      # caller MUST guarantee that it has right to update this key == no other servers will try to update it
      update_secret() {
          local new_keypairs keypairs_b64
          new_keypairs=$(get_key "$P" \
            | jq -er '.data.keypairs' \
            | base64 -d \
            | jq --arg new_key "$1" -er \
              '([ {key: $new_key, createdAt: now} ] + .) | tojson')
          SECRET_JSON=$(secret "$P" "$new_keypairs")
          have_good_cert "$SECRET_JSON" || {
              log "** ERROR/BUG: We generated a key, but didn't produce result which passes 'have_good_cert' check. K8S secret will not be updated"
              return 1
          }
          kubectl --namespace=kube-system --request-timeout="${UPDATE_OPERATION_TIMEOUT}s" replace -f - <<<"$SECRET_JSON"
      }

      # expects a single arg `secret_json`, which is a content of secret in k8s
      # it examines certs stored in it and identifies if it is a good one to be used, or
      # we need a better one
      have_good_cert() {
          log "Check that first key doesn't expire within threshold=${KEY_EXPIRE_THRESHOLD_SECONDS} seconds"
          [[ -n "$1" ]] || return $?
          jq -er '.data.keypairs' <<<"$1" | base64 -d | jq --arg expire_threshold ${KEY_EXPIRE_THRESHOLD_SECONDS} -e \
            '.[0].createdAt as $createdAt
            | $createdAt != null
              and now - $createdAt < ($expire_threshold|tonumber)'
      }

      save_keys_to_file() {
          T="$1".tmp
          log "Saving secrets to $1"
          jq -er '.data.keypairs' <<<"$SECRET_JSON" | base64 -d | jq -er '.[].key' > "$T"
          mv "$T" "$1"
      }

      release_lock() { kubectl --namespace=kube-system delete secret/"$P-lock"; }

      # "Lock" here is an atomically created sa-key-lock secret
      acquire_lock() {
          log "acquire_lock $P-lock"
          secret "$P-lock" | kubectl --namespace=kube-system create -f - || {
              log -n "acquire_lock failed, checking if lock is stale"
              get_key "$P-lock" | jq -e "now - (.metadata.creationTimestamp|fromdate) < $LOCK_EXPIRE_TIMEOUT_SECONDS" >/dev/null || {
                  log "$P-lock is a stale lock, deleting it so it can be reacquired"
                  release_lock || log "Lock deletion failed, but we ignore this error as it is racey"
              }
              return 1  # need to return error, to indicate we failed to aquire lock, so that caller can try again
          }
      }

      init_key &>/dev/null || :  # ignore errors if key can't be created if it was by someone else
      SECRET_JSON=$(get_key "$P") || :
      while ! have_good_cert "$SECRET_JSON"; do
        : ${new_key_json:=$(gen_new_key)}
        if acquire_lock; then
          update_secret "$new_key_json" || { release_lock; exit 1; } # populate_key_with_data is guaranteed to complete in < LOCK_EXPIRE time
          release_lock
          break
        else
          log "Somebody else acquired lock, waiting for cert to be generated"
          sleep 10
        fi
        SECRET_JSON=$(get_key "$P")
      done

      save_keys_to_file "$1"

      trap 'echo "** ERROR: unable to create or fetch secret"' ERR
{{/* RUN-509 Remove vault-based certs */}}
{{- if .Controller.CustomFiles}}
  {{- range $w := .Controller.CustomFiles}}
  - path: {{$w.Path}}
    permissions: {{$w.PermissionsString}}
    encoding: gzip+base64
    content: {{$w.GzippedBase64Content}}
  {{- end }}
{{- end }}
  - path: /etc/modules-load.d/ip_vs.conf
    content: |
      ip_vs
      ip_vs_rr
      ip_vs_wrr
      ip_vs_sh
      nf_conntrack_ipv4
{{if and (.AmazonSsmAgent.Enabled) (ne .AmazonSsmAgent.DownloadUrl "")}}
  - path: "/opt/ssm/bin/install-ssm-agent.sh"
    permissions: 0700
    content: |
      #!/bin/bash
      set -e

      TARGET_DIR=/opt/ssm
      if [[ -f "${TARGET_DIR}"/bin/amazon-ssm-agent ]]; then
        exit 0
      fi

      TMP_DIR=$(mktemp -d)
      trap "rm -rf ${TMP_DIR}" EXIT

      TAR_FILE=ssm.linux-amd64.tar.gz
      CHECKSUM_FILE="${TAR_FILE}.sha1"

      echo -n "{{ .AmazonSsmAgent.Sha1Sum }} ${TMP_DIR}/${TAR_FILE}" > "${TMP_DIR}/${CHECKSUM_FILE}"

      curl --silent -L -o "${TMP_DIR}/${TAR_FILE}" "{{ .AmazonSsmAgent.DownloadUrl }}"

      sha1sum --quiet -c "${TMP_DIR}/${CHECKSUM_FILE}"

      tar zfx "${TMP_DIR}"/"${TAR_FILE}" -C "${TMP_DIR}"
      chown -R root:root "${TMP_DIR}"/ssm

      CONFIG_DIR=/etc/amazon/ssm
      mkdir -p "${CONFIG_DIR}"
      mv -f "${TMP_DIR}"/ssm/amazon-ssm-agent.json "${CONFIG_DIR}"/amazon-ssm-agent.json
      mv -f "${TMP_DIR}"/ssm/seelog_unix.xml "${CONFIG_DIR}"/seelog.xml

      mv -f "${TMP_DIR}"/ssm/* "${TARGET_DIR}"/bin/

{{end}}
{{if .Experimental.DisableSecurityGroupIngress}}
  - path: /etc/kubernetes/additional-configs/cloud.config
    owner: root:root
    permissions: 0644
    content: |
      [global]
      DisableSecurityGroupIngress = true
{{end}}

  - path: /opt/bin/apply-kube-aws-plugins
    permissions: 0700
    owner: root:root
    content: |
      #!/bin/bash -vxe

      kubectl() {
          /usr/bin/docker run --rm --net=host \
            -v /etc/resolv.conf:/etc/resolv.conf \
            -v {{.KubernetesManifestPlugin.Directory}}:{{.KubernetesManifestPlugin.Directory}} \
            {{.HyperkubeImage.RepoWithTag}} /hyperkube kubectl "$@"
      }

      helm() {
          /usr/bin/docker run --rm --net=host \
            -v /etc/resolv.conf:/etc/resolv.conf \
            -v {{.HelmReleasePlugin.Directory}}:{{.HelmReleasePlugin.Directory}} \
            {{.HelmImage.RepoWithTag}} helm "$@"
      }

      while read m || [[ -n $m ]]; do
        kubectl apply -f $m
      done <{{.KubernetesManifestPlugin.ManifestListFile.Path}}

      while read r || [[ -n $r ]]; do
        release_name=$(jq .name $r)
        chart_name=$(jq .chart.name $r)
        chart_version=$(jq .chart.version $r)
        values_file=$(jq .values.file $r)
        if helm status $release_name; then
          helm upgrade $release_name $chart_name --version $chart_version -f $values_file
        else
          helm install $release_name $chart_name --version $chart_version -f $values_file
        fi
      done <{{.HelmReleasePlugin.ReleaseListFile.Path}}

{{if .Experimental.AwsEnvironment.Enabled}}
  - path: /opt/bin/set-aws-environment
    owner: root:root
    permissions: 0700
    content: |
      #!/bin/bash -e

      rkt run \
        --volume=dns,kind=host,source=/etc/resolv.conf,readOnly=true \
        --mount volume=dns,target=/etc/resolv.conf \
        --volume=awsenv,kind=host,source=/etc/aws-environment,readOnly=false \
        --mount volume=awsenv,target=/etc/aws-environment \
        --uuid-file-save=/var/run/coreos/set-aws-environment.uuid \
        --net=host \
        --trust-keys-from-https \
        {{.AWSCliImage.Options}}{{.AWSCliImage.RktRepo}} --exec=/bin/bash -- \
          -ec \
          'instance_id=$(curl http://169.254.169.254/latest/meta-data/instance-id)
           stack_name=$(
             aws ec2 describe-tags --region {{.Region}} --filters \
               "Name=resource-id,Values=$instance_id" \
               "Name=key,Values=aws:cloudformation:stack-name" \
               --output json \
             | jq -r ".Tags[].Value"
           )
           cfn-init -v -c "aws-environment" --region {{.Region}} --resource {{.Controller.LogicalName}} --stack $stack_name
          '

      rkt rm --uuid-file=/var/run/coreos/set-aws-environment.uuid || :
{{end}}
{{ if .SharedPersistentVolume }}
  - path: /opt/bin/set-efs-pv
    owner: root:root
    permissions: 0700
    content: |
      #!/bin/bash -e

      rkt run \
        --volume=dns,kind=host,source=/etc/resolv.conf,readOnly=true \
        --mount volume=dns,target=/etc/resolv.conf \
        --volume=awsenv,kind=host,source=/etc/kubernetes,readOnly=false \
        --mount volume=awsenv,target=/etc/kubernetes \
        --uuid-file-save=/var/run/coreos/set-efs-pv.uuid \
        --net=host \
        --trust-keys-from-https \
        {{.AWSCliImage.Options}}{{.AWSCliImage.RktRepo}} --exec=/bin/bash -- \
          -ec \
          'instance_id=$(curl http://169.254.169.254/latest/meta-data/instance-id)
           stack_name=$(
             aws ec2 describe-tags --region {{.Region}} --filters \
               "Name=resource-id,Values=$instance_id" \
               "Name=key,Values=aws:cloudformation:stack-name" \
               --output json \
             | jq -r ".Tags[].Value"
           )
           cfn-init -v -c "load-efs-pv" --region {{.Region}} --resource {{.Controller.LogicalName}} --stack $stack_name
          '

      rkt rm --uuid-file=/var/run/coreos/set-efs-pv.uuid || :
{{end}}
  - path: /opt/bin/cfn-signal
    owner: root:root
    permissions: 0700
    content: |
      #!/bin/bash -e

      rkt run \
        --volume=dns,kind=host,source=/etc/resolv.conf,readOnly=true \
        --mount volume=dns,target=/etc/resolv.conf \
        --volume=awsenv,kind=host,source=/var/run/coreos,readOnly=false \
        --mount volume=awsenv,target=/var/run/coreos \
        --uuid-file-save=/var/run/coreos/cfn-signal.uuid \
        --net=host \
        --trust-keys-from-https \
        {{.AWSCliImage.Options}}{{.AWSCliImage.RktRepo}} --exec=/bin/bash -- \
          -ec \
          'instance_id=$(curl http://169.254.169.254/latest/meta-data/instance-id)
           stack_name=$(
             aws ec2 describe-tags --region {{.Region}} --filters \
               "Name=resource-id,Values=$instance_id" \
               "Name=key,Values=aws:cloudformation:stack-name" \
               --output json \
             | jq -r ".Tags[].Value"
           )
           cfn-signal -e 0 --region {{.Region}} --resource {{.Controller.LogicalName}} --stack $stack_name
          '

      rkt rm --uuid-file=/var/run/coreos/cfn-signal.uuid || :

  - path: /opt/bin/cfn-etcd-environment
    owner: root:root
    permissions: 0700
    content: |
      #!/bin/bash -e

      rkt run \
        --volume=dns,kind=host,source=/etc/resolv.conf,readOnly=true \
        --mount volume=dns,target=/etc/resolv.conf \
        --volume=awsenv,kind=host,source=/var/run/coreos,readOnly=false \
        --mount volume=awsenv,target=/var/run/coreos \
        --uuid-file-save=/var/run/coreos/cfn-etcd-environment.uuid \
        --net=host \
        --trust-keys-from-https \
        {{.AWSCliImage.Options}}{{.AWSCliImage.RktRepo}} --exec=/bin/bash -- \
          -ec \
          'instance_id=$(curl http://169.254.169.254/latest/meta-data/instance-id)
           stack_name=$(
             aws ec2 describe-tags --region {{.Region}} --filters \
               "Name=resource-id,Values=$instance_id" \
               "Name=key,Values=aws:cloudformation:stack-name" \
               --output json \
             | jq -r ".Tags[].Value"
           )
           cfn-init -v -c "etcd-client" --region {{.Region}} --resource {{.Controller.LogicalName}} --stack $stack_name
          '

      rkt rm --uuid-file=/var/run/coreos/cfn-etcd-environment.uuid || :

  - path: /etc/default/kubelet
    permissions: 0755
    owner: root:root
    content: |
      KUBELET_OPTS="{{.Experimental.KubeletOpts}}"

  - path: /opt/bin/install-kube-system
    permissions: 0700
    owner: root:root
    content: |
      #!/bin/bash -e

      kubectl() {
{{/* RUN-578 Introduce Dex */}}
          /usr/bin/docker run --rm -i --net=host -v /etc/kubernetes:/etc/kubernetes -v /srv/kubernetes:/srv/kubernetes {{.HyperkubeImage.RepoWithTag}} /hyperkube kubectl "$@"
{{/* RUN-578 Introduce Dex */}}
      }

      while ! kubectl get ns kube-system; do
        echo Waiting until kube-system created.
        sleep 3
      done

      mfdir=/srv/kubernetes/manifests

      {{ if .UseCalico }}
      /bin/bash /opt/bin/populate-tls-calico-etcd
      kubectl apply -f "${mfdir}/calico.yaml"
      {{ end }}

      {{ if .Experimental.NodeDrainer.Enabled }}
      for manifest in {kube-node-drainer-ds,kube-node-drainer-asg-status-updater-de}; do
          kubectl apply -f "${mfdir}/$manifest.yaml"
      done
      {{ end }}

      # Secrets
      kubectl apply -f "${mfdir}/kubernetes-dashboard-se.yaml"

      # Configmaps
      for manifest in {kube-dns,kube-proxy}; do
        kubectl apply -f "${mfdir}/$manifest-cm.yaml"
      done

      # Service Accounts
      for manifest in {kube-dns,heapster,kube-proxy,kubernetes-dashboard}; do
          kubectl apply -f "${mfdir}/$manifest-sa.yaml"
      done

      # Install tiller by default
      kubectl apply -f "${mfdir}/tiller.yaml"

{{ if .KubeDns.NodeLocalResolver }}
      # DNS Masq Fix
      kubectl apply -f "${mfdir}/dnsmasq-node-ds.yaml"
{{ end }}

      # Deployments
      for manifest in {kube-dns,kube-dns-autoscaler,kubernetes-dashboard,{{ if .Addons.ClusterAutoscaler.Enabled }}cluster-autoscaler,{{ end }}heapster{{ if .KubeResourcesAutosave.Enabled }},kube-resources-autosave{{ end }}}; do
          kubectl apply -f "${mfdir}/$manifest-de.yaml"
      done

{{/* RUN-605 Add Flyte */}}
      {{ if .CustomSettings.Flyte.Enabled }}
      kubectl apply -f "${mfdir}/flyte-konveyor.yaml"
      {{ end }}
{{/* RUN-605 Add Flyte */}}

      # Daemonsets
      for manifest in {kube-proxy,}; do
          kubectl apply -f "${mfdir}/$manifest-ds.yaml"
      done

      # Services
      for manifest in {kube-dns,heapster,kubernetes-dashboard}; do
          kubectl apply -f "${mfdir}/$manifest-svc.yaml"
      done

      {{- if .Addons.Rescheduler.Enabled }}
      kubectl apply -f "${mfdir}/kube-rescheduler-de.yaml"
      {{- end }}

      mfdir=/srv/kubernetes/rbac

      # Cluster roles and bindings
      for manifest in {node-extensions,}; do
          kubectl apply -f "${mfdir}/cluster-roles/$manifest.yaml"
      done
      for manifest in {kube-admin,system-worker,node,node-proxier,node-extensions,heapster}; do
          kubectl apply -f "${mfdir}/cluster-role-bindings/$manifest.yaml"
      done

      {{ if .KubeDashboardAdminPrivileges }}
      kubectl apply -f "${mfdir}/cluster-role-bindings/kubernetes-dashboard-admin.yaml"
      {{- end }}

      # Roles and bindings
      for manifest in {pod-nanny,kubernetes-dashboard}; do
          kubectl apply -f "${mfdir}/roles/$manifest.yaml"
      done
      for manifest in {heapster-nanny,kubernetes-dashboard}; do
          kubectl apply -f "${mfdir}/role-bindings/$manifest.yaml"
      done

      {{ if .Experimental.TLSBootstrap.Enabled }}
      for manifest in {node-bootstrapper,kubelet-certificate-bootstrap}; do
          kubectl apply -f "${mfdir}/cluster-roles/$manifest.yaml"
      done

      for manifest in {node-bootstrapper,kubelet-certificate-bootstrap}; do
          kubectl apply -f "${mfdir}/cluster-role-bindings/$manifest.yaml"
      done
      {{ end }}

{{/* RUN-578 Introduce Dex */}}
     {{ if .Experimental.Oidc.Enabled }}
      # create/replace Dex TLS secret
      : ${LOCK_EXPIRE_TIMEOUT_SECONDS:=20}  # maximum time any operation under lock can take
      UPDATE_OPERATION_TIMEOUT=$(( LOCK_EXPIRE_TIMEOUT_SECONDS / 2 ))
      P=dex.kube-system.tls
      OIDC_CERT="/etc/kubernetes/ssl/oidc.pem"
      OIDC_KEY="/etc/kubernetes/ssl/oidc-key.pem"

      # tls for dex is from secret from predefined cert and key
      secret() {
          kubectl --namespace=kube-system create secret tls "$1" --cert ${OIDC_CERT} --key ${OIDC_KEY} --dry-run -o json
      }
      get_key() { kubectl --namespace=kube-system get -o json secret "$1"; }
      init_key() { secret "$P" | kubectl --namespace=kube-system create -f -; }

      update_secret() {
        SECRET_JSON=$(secret "$P")
        kubectl --namespace=kube-system --request-timeout="${UPDATE_OPERATION_TIMEOUT}s" replace -f - <<<"$SECRET_JSON"
      }

      compare_dex_tls() {
        [[ -n "$1" ]] || return $?
        secret_md5sum=$(jq -er '.data' <<<"$1" | md5sum | awk '{ print $1 }')
        new_secret_md5sum=$(secret "$P" | jq -er '.data' | md5sum | awk '{ print $1 }')
        # check the tls cert and key has not changed - if it has, we need to replace it
        if [ "${secret_md5sum}" != "${new_secret_md5sum}" ]; then
          return 1
        fi
      }

      init_key &>/dev/null || :  # ignore errors if key can't be created if it was by someone else
      SECRET_JSON=$(get_key "$P") || :
      while ! compare_dex_tls "$SECRET_JSON"; do
        update_secret || exit 1;
        SECRET_JSON=$(get_key "$P")
      done

      mfdir=/srv/kubernetes/rbac
      # Allow unauthenticated proxy request for dex in cluster
      kubectl apply -f "${mfdir}/cluster-role-bindings/dex.yaml"

      mfdir=/srv/kubernetes/manifests
      # create dex service
      kubectl apply -f "${mfdir}/dex-svc.yaml"

      # hash of dex config map and redeploy dex if different
      # TODO do we need to check if config map already exists? Current way will wipe any customisation done via kubectl edit
      dex_configmap_hash=$(md5sum ${mfdir}/dex-cm.yaml | awk '{ print $1 }')
      kubectl apply -f "${mfdir}/dex-cm.yaml"
      sed -i -e "s#hcom-dex-configmap-hash: '\(.*\)'#hcom-dex-configmap-hash: '${dex_configmap_hash}'#g" ${mfdir}/dex-deployment.yaml.tmpl
      kubectl apply -f ${mfdir}/dex-deployment.yaml.tmpl
      {{ end }}
{{/* RUN-578 Introduce Dex */}}

      {{if .Experimental.Kube2IamSupport.Enabled }}
        mfdir=/srv/kubernetes/manifests
        kubectl apply -f "${mfdir}/kube2iam-rbac.yaml"
        kubectl apply -f "${mfdir}/kube2iam-ds.yaml";
      {{ end }}

  - path: /etc/kubernetes/cni/docker_opts_cni.env
    content: |
      DOCKER_OPT_BIP=""
      DOCKER_OPT_IPMASQ=""

  - path: /opt/bin/host-rkt
    permissions: 0755
    owner: root:root
    content: |
      #!/bin/sh
      # This is bind mounted into the kubelet rootfs and all rkt shell-outs go
      # through this rkt wrapper. It essentially enters the host mount namespace
      # (which it is already in) only for the purpose of breaking out of the chroot
      # before calling rkt. It makes things like rkt gc work and avoids bind mounting
      # in certain rkt filesystem dependancies into the kubelet rootfs. This can
      # eventually be obviated when the write-api stuff gets upstream and rkt gc is
      # through the api-server. Related issue:
      # https://github.com/coreos/rkt/issues/2878
      exec nsenter -m -u -i -n -p -t 1 -- /usr/bin/rkt "$@"

{{ if .UseCalico }}
  - path: /srv/kubernetes/manifests/calico.yaml
    content: |
      kind: ConfigMap
      apiVersion: v1
      metadata:
        name: calico-config
        namespace: kube-system
      data:
        etcd_endpoints: "#ETCD_ENDPOINTS#"
        cni_network_config: |-
          {
              "name": "calico",
              "type": "flannel",
              "delegate": {
                  "type": "calico",
                  "etcd_endpoints": "__ETCD_ENDPOINTS__",
                  "etcd_key_file": "__ETCD_KEY_FILE__",
                  "etcd_cert_file": "__ETCD_CERT_FILE__",
                  "etcd_ca_cert_file": "__ETCD_CA_CERT_FILE__",
                  "log_level": "info",
                  "policy": {
                      "type": "k8s",
                      "k8s_api_root": "https://__KUBERNETES_SERVICE_HOST__:__KUBERNETES_SERVICE_PORT__",
                      "k8s_auth_token": "__SERVICEACCOUNT_TOKEN__"
                  },
                  "kubernetes": {
                      "kubeconfig": "__KUBECONFIG_FILEPATH__"
                  }
              }
          }

        etcd_ca: "/calico-secrets/etcd-ca"
        etcd_cert: "/calico-secrets/etcd-cert"
        etcd_key: "/calico-secrets/etcd-key"

      ---

      apiVersion: v1
      kind: Secret
      type: Opaque
      metadata:
        name: calico-etcd-secrets
        namespace: kube-system
      data:
        etcd-key: "$ETCDKEY"
        etcd-cert: "$ETCDCERT"
        etcd-ca: "$ETCDCA"

      ---

      kind: DaemonSet
      apiVersion: extensions/v1beta1
      metadata:
        name: calico-node
        namespace: kube-system
        labels:
          k8s-app: calico-node
      spec:
        selector:
          matchLabels:
            k8s-app: calico-node
        updateStrategy:
          type: RollingUpdate
        template:
          metadata:
            labels:
              k8s-app: calico-node
            annotations:
              scheduler.alpha.kubernetes.io/critical-pod: ''
          spec:
            tolerations:
            - operator: Exists
              effect: NoSchedule
            - operator: Exists
              effect: NoExecute
            - operator: Exists
              key: CriticalAddonsOnly
            hostNetwork: true
            containers:
              - name: calico-node
                image: {{ .CalicoNodeImage.RepoWithTag }}
                env:
                  - name: ETCD_ENDPOINTS
                    valueFrom:
                      configMapKeyRef:
                        name: calico-config
                        key: etcd_endpoints
                  - name: CALICO_NETWORKING_BACKEND
                    value: "none"
                  - name: CLUSTER_TYPE
                    value: "kubeaws,canal"
                  - name: CALICO_DISABLE_FILE_LOGGING
                    value: "true"
{{/* RUN-449 Open Node IpTables */}}
                  - name: FELIX_DEFAULTENDPOINTTOHOSTACTION
                    value: "ACCEPT"
{{/* RUN-449 Open Node IpTables */}}
                  - name: NO_DEFAULT_POOLS
                    value: "true"
                  - name: ETCD_CA_CERT_FILE
                    valueFrom:
                      configMapKeyRef:
                        name: calico-config
                        key: etcd_ca
                  - name: ETCD_KEY_FILE
                    valueFrom:
                      configMapKeyRef:
                        name: calico-config
                        key: etcd_key
                  - name: ETCD_CERT_FILE
                    valueFrom:
                      configMapKeyRef:
                        name: calico-config
                        key: etcd_cert
                securityContext:
                  privileged: true
                volumeMounts:
                  - mountPath: /lib/modules
                    name: lib-modules
                    readOnly: true
                  - mountPath: /var/run/calico
                    name: var-run-calico
                    readOnly: false
                  - mountPath: /calico-secrets
                    name: etcd-certs
                  - mountPath: /etc/resolv.conf
                    name: dns
                    readOnly: true
            volumes:
              - name: lib-modules
                hostPath:
                  path: /lib/modules
              - name: var-run-calico
                hostPath:
                  path: /var/run/calico
              - name: cni-bin-dir
                hostPath:
                  path: /opt/cni/bin
              - name: cni-net-dir
                hostPath:
                  path: /etc/kubernetes/cni/net.d
              - name: etcd-certs
                secret:
                  secretName: calico-etcd-secrets
              - name: dns
                hostPath:
                  path: /etc/resolv.conf

      ---

      apiVersion: extensions/v1beta1
      kind: Deployment
      metadata:
        name: calico-kube-controllers
        namespace: kube-system
        labels:
          k8s-app: calico-policy
        annotations:
          scheduler.alpha.kubernetes.io/critical-pod: ''

      spec:
        replicas: 1
        template:
          metadata:
            name: calico-kube-controllers
            namespace: kube-system
            labels:
              k8s-app: calico-policy
          spec:
            tolerations:
            - key: "node.alpha.kubernetes.io/role"
              operator: "Equal"
              value: "master"
              effect: "NoSchedule"
            - key: "CriticalAddonsOnly"
              operator: "Exists"
            hostNetwork: true
            containers:
              - name: calico-kube-controllers
                image: {{ .CalicoKubeControllersImage.RepoWithTag }}
                env:
                  - name: ETCD_ENDPOINTS
                    valueFrom:
                      configMapKeyRef:
                        name: calico-config
                        key: etcd_endpoints
                  - name: ETCD_CA_CERT_FILE
                    valueFrom:
                      configMapKeyRef:
                        name: calico-config
                        key: etcd_ca
                  - name: ETCD_KEY_FILE
                    valueFrom:
                      configMapKeyRef:
                        name: calico-config
                        key: etcd_key
                  - name: ETCD_CERT_FILE
                    valueFrom:
                      configMapKeyRef:
                        name: calico-config
                        key: etcd_cert
                  - name: K8S_API
                    value: "https://kubernetes.default:443"
                  - name: CONFIGURE_ETC_HOSTS
                    value: "true"
                volumeMounts:
                  - mountPath: /calico-secrets
                    name: etcd-certs
            volumes:
              - name: etcd-certs
                secret:
                  secretName: calico-etcd-secrets

  - path: /opt/bin/populate-tls-calico-etcd
    owner: root:root
    permissions: 0700
    content: |
      #!/bin/bash -e

{{/* RUN-509 Remove vault-based certs */}}
      # we read ca.pem instead of etcd-trusted-ca.pem as former completes full chain and that is what required by python ssl used in calico-policy controller
      etcd_ca=$(cat /etc/kubernetes/ssl/ca.pem | base64 | tr -d '\n')
{{/* RUN-509 Remove vault-based certs */}}
      etcd_key=$(cat /etc/kubernetes/ssl/etcd-client-key.pem | base64 | tr -d '\n')
      etcd_cert=$(cat /etc/kubernetes/ssl/etcd-client.pem | base64 | tr -d '\n')

      sed -i -e "s#\$ETCDCA#$etcd_ca#g" /srv/kubernetes/manifests/calico.yaml
      sed -i -e "s#\$ETCDCERT#$etcd_cert#g" /srv/kubernetes/manifests/calico.yaml
      sed -i -e "s#\$ETCDKEY#$etcd_key#g" /srv/kubernetes/manifests/calico.yaml

{{ end }}
{{ if .KubeResourcesAutosave.Enabled }}
  - path: /srv/kubernetes/manifests/kube-resources-autosave-de.yaml
    content: |
      ---
      apiVersion: extensions/v1beta1
      kind: Deployment
      metadata:
        name: kube-resources-autosave
        namespace: kube-system
        labels:
          k8s-app: kube-resources-autosave-policy
      spec:
        replicas: 1
        template:
          metadata:
            name: kube-resources-autosave
            namespace: kube-system
            labels:
              k8s-app: kube-resources-autosave-policy
          spec:
            containers:
            - name: kube-resources-autosave-dumper
              image: {{.HyperkubeImage.RepoWithTag}}
              command: ["/bin/sh", "-c" ]
              args:
                - |
                    set -x ;
                    DUMP_DIR_COMPLETE=/kube-resources-autosave/complete ;
                    mkdir -p ${DUMP_DIR_COMPLETE} ;
                    while true; do
                      TIMESTAMP=$(date +%Y-%m-%d_%H-%M-%S)
                      DUMP_DIR=/kube-resources-autosave/tmp/${TIMESTAMP} ;
                      mkdir -p ${DUMP_DIR} ;
                      RESOURCES_OUT_NAMESPACE="namespaces persistentvolumes nodes storageclasses clusterrolebindings clusterroles";
                      for r in ${RESOURCES_OUT_NAMESPACE};do
                        echo " Searching for resources: ${r}" ;
                        /kubectl get --export -o=json ${r} | \
                        jq '.items |= ([ .[] |
                            del(.status,
                            .metadata.uid,
                            .metadata.selfLink,
                            .metadata.resourceVersion,
                            .metadata.creationTimestamp,
                            .metadata.generation,
                            .spec.claimRef
                          )])' > ${DUMP_DIR}/${r}.json ;
                      done ;
                      RESOURCES_IN_NAMESPACE="componentstatuses configmaps daemonsets deployments endpoints events horizontalpodautoscalers
                      ingresses jobs limitranges networkpolicies  persistentvolumeclaims pods podsecuritypolicies podtemplates replicasets
                      replicationcontrollers resourcequotas secrets serviceaccounts services statefulsets thirdpartyresources
                      poddisruptionbudgets roles rolebindings";
                      for ns in $(jq -r '.items[].metadata.name' < ${DUMP_DIR}/namespaces.json);do
                        echo "Searching in namespace: ${ns}" ;
                        mkdir -p ${DUMP_DIR}/${ns} ;
                        for r in ${RESOURCES_IN_NAMESPACE};do
                          echo " Searching for resources: ${r}" ;
                          /kubectl --namespace=${ns} get --export -o=json ${r} | \
                          jq '.items |= ([ .[] |
                            select(.type!="kubernetes.io/service-account-token") |
                            del(
                              .spec.clusterIP,
                              .metadata.uid,
                              .metadata.selfLink,
                              .metadata.resourceVersion,
                              .metadata.creationTimestamp,
                              .metadata.generation,
                              .metadata.annotations."pv.kubernetes.io/bind-completed",
                              .status
                            )])' > ${DUMP_DIR}/${ns}/${r}.json && touch /probe-token ;
                        done ;
                      done ;
                    mv ${DUMP_DIR} ${DUMP_DIR_COMPLETE}/${TIMESTAMP} ;
                    rm -r -f ${DUMP_DIR} ;
                    sleep 24h ;
                    done
              livenessProbe:
                exec:
                  command: ["/bin/bash", "-c", "(( $(date +%s) - $(stat -c%Y /probe-token) < 25*60*60 ))" ]
                initialDelaySeconds: 240
                periodSeconds: 10
              volumeMounts:
              - name: dump-dir
                mountPath: /kube-resources-autosave
                readOnly: false
            - name: kube-resources-autosave-pusher
              image: {{.AWSCliImage.RepoWithTag}}
              command: ["/bin/bash", "-c" ]
              args:
                - |
                    set -x ;
                    DUMP_DIR_COMPLETE=/kube-resources-autosave/complete ;
                    while true; do
                      for FILE in ${DUMP_DIR_COMPLETE}/* ; do
                        aws s3 mv ${FILE} s3://{{ .KubeResourcesAutosave.S3Path }}/$(basename ${FILE}) --recursive && rm -r -f ${FILE} && touch /probe-token ;
                      done ;
                      sleep 1m ;
                    done
              livenessProbe:
                exec:
                  command: ["/bin/bash", "-c", "(( $(date +%s) - $(stat -c%Y /probe-token) < 25*60*60 ))" ]
                initialDelaySeconds: 240
                periodSeconds: 10
              volumeMounts:
              - name: dump-dir
                mountPath: /kube-resources-autosave
                readOnly: false
            volumes:
            - name: dump-dir
              emptyDir: {}
{{ end }}

{{if .AssetsEncryptionEnabled }}
  - path: /opt/bin/decrypt-assets
    owner: root:root
    permissions: 0700
    content: |
      #!/bin/bash -e

      rkt run \
        --volume=kube,kind=host,source=/etc/kubernetes,readOnly=false \
        --mount=volume=kube,target=/etc/kubernetes \
        --uuid-file-save=/var/run/coreos/decrypt-assets.uuid \
        --volume=dns,kind=host,source=/etc/resolv.conf,readOnly=true --mount volume=dns,target=/etc/resolv.conf \
        --net=host \
        --trust-keys-from-https \
        {{.AWSCliImage.Options}}{{.AWSCliImage.RktRepo}} --exec=/bin/bash -- \
          -ec \
          'echo decrypting assets
           shopt -s nullglob
           for encKey in /etc/kubernetes/{ssl,{{ if or (.AssetsConfig.HasAuthTokens) ( and .Experimental.TLSBootstrap.Enabled .AssetsConfig.HasTLSBootstrapToken) }}auth{{end}}}/*.enc; do
             echo decrypting $encKey
             f=$(mktemp $encKey.XXXXXXXX)
             /usr/bin/aws \
               --region {{.Region}} kms decrypt \
               --ciphertext-blob fileb://$encKey \
               --output text \
               --query Plaintext \
             | base64 -d > $f
             mv -f $f ${encKey%.enc}
           done;

           {{- if or (.AssetsConfig.HasAuthTokens) ( and .Experimental.TLSBootstrap.Enabled .AssetsConfig.HasTLSBootstrapToken) }}
           authDir=/etc/kubernetes/auth
           echo generating $authDir/tokens.csv
           echo > $authDir/tokens.csv

           {{- if .AssetsConfig.HasTLSBootstrapToken }}
           echo $(cat $authDir/kubelet-tls-bootstrap-token.tmp),kubelet-bootstrap,10001,system:kubelet-bootstrap >> $authDir/tokens.csv
           {{- end }}
           {{- if .AssetsConfig.HasAuthTokens }}
           cat $authDir/tokens.csv.tmp >> $authDir/tokens.csv
           {{- end }}
           {{- end }}

           echo done.'

      rkt rm --uuid-file=/var/run/coreos/decrypt-assets.uuid || :
{{ end }}

{{if .Experimental.NodeDrainer.Enabled}}
  - path: /srv/kubernetes/manifests/kube-node-drainer-asg-status-updater-de.yaml
    content: |
        kind: Deployment
        apiVersion: extensions/v1beta1
        metadata:
          name: kube-node-drainer-asg-status-updater
          namespace: kube-system
          labels:
            k8s-app: kube-node-drainer-asg-status-updater
        spec:
          replicas: 1
          template:
            metadata:
              labels:
                k8s-app: kube-node-drainer-asg-status-updater
              annotations:
                scheduler.alpha.kubernetes.io/critical-pod: ''
            spec:
              initContainers:
                - name: hyperkube
                  image: {{.HyperkubeImage.RepoWithTag}}
                  command:
                  - /bin/cp
                  - -f
                  - /hyperkube
                  - /workdir/hyperkube
                  volumeMounts:
                  - mountPath: /workdir
                    name: workdir
              containers:
                - name: main
                  image: {{.AWSCliImage.RepoWithTag}}
                  env:
                  - name: NODE_NAME
                    valueFrom:
                      fieldRef:
                        fieldPath: spec.nodeName
                  command:
                  - /bin/sh
                  - -xec
                  - |
                    metadata() { wget -O - -q http://169.254.169.254/2016-09-02/"$1"; }
                    asg()      { aws --region="${REGION}" autoscaling "$@"; }

                    # Hyperkube binary is not statically linked, so we need to use
                    # the musl interpreter to be able to run it in this image
                    # See: https://github.com/kubernetes-incubator/kube-aws/pull/674#discussion_r118889687
                    kubectl() { /lib/ld-musl-x86_64.so.1 /opt/bin/hyperkube kubectl "$@"; }

                    REGION=$(metadata dynamic/instance-identity/document | jq -r .region)
                    [ -n "${REGION}" ]

                    # Not customizable, for now
                    POLL_INTERVAL=10

                    # Keeps a comma-separated list of instances that need to be drained. Sets '-'
                    # to force the ConfigMap to be updated in the first iteration.
                    instances_to_drain='-'

                    # Instance termination detection loop
                    while sleep ${POLL_INTERVAL}; do

                      # Fetch the list of instances being terminated by their respective ASGs
                      updated_instances_to_drain=$(asg describe-auto-scaling-groups | jq -r '[.AutoScalingGroups[] | select((.Tags[].Key | contains("kube-aws:")) and (.Tags[].Key | contains("kubernetes.io/cluster/{{.ClusterName}}"))) | .Instances[] | select(.LifecycleState == "Terminating:Wait") | .InstanceId] | sort | join(",")')

                      # Have things changed since last iteration?
                      if [ "${updated_instances_to_drain}" == "${instances_to_drain}" ]; then
                        continue
                      fi
                      instances_to_drain="${updated_instances_to_drain}"

                      # Update ConfigMap to reflect current ASG state
                      echo "{\"apiVersion\": \"v1\", \"kind\": \"ConfigMap\", \"metadata\": {\"name\": \"kube-node-drainer-status\"}, \"data\": {\"asg\": \"${instances_to_drain}\"}}" | kubectl -n kube-system apply -f -
                    done
                  volumeMounts:
                  - mountPath: /opt/bin
                    name: workdir
              volumes:
                - name: workdir
                  emptyDir: {}

  - path: /srv/kubernetes/manifests/kube-node-drainer-ds.yaml
    content: |
        kind: DaemonSet
        apiVersion: extensions/v1beta1
        metadata:
          name: kube-node-drainer-ds
          namespace: kube-system
          labels:
            k8s-app: kube-node-drainer-ds
        spec:
          updateStrategy:
            type: RollingUpdate
          template:
            metadata:
              labels:
                k8s-app: kube-node-drainer-ds
              annotations:
                scheduler.alpha.kubernetes.io/critical-pod: ''
            spec:
              tolerations:
              - operator: Exists
                effect: NoSchedule
              - operator: Exists
                effect: NoExecute
              - operator: Exists
                key: CriticalAddonsOnly
              initContainers:
                - name: hyperkube
                  image: {{.HyperkubeImage.RepoWithTag}}
                  command:
                  - /bin/cp
                  - -f
                  - /hyperkube
                  - /workdir/hyperkube
                  volumeMounts:
                  - mountPath: /workdir
                    name: workdir
              containers:
                - name: main
                  image: {{.AWSCliImage.RepoWithTag}}
                  env:
                  - name: NODE_NAME
                    valueFrom:
                      fieldRef:
                        fieldPath: spec.nodeName
                  command:
                  - /bin/sh
                  - -xec
                  - |
                    metadata() { wget -O - -q http://169.254.169.254/2016-09-02/"$1"; }
                    asg()      { aws --region="${REGION}" autoscaling "$@"; }

                    # Hyperkube binary is not statically linked, so we need to use
                    # the musl interpreter to be able to run it in this image
                    # See: https://github.com/kubernetes-incubator/kube-aws/pull/674#discussion_r118889687
                    kubectl() { /lib/ld-musl-x86_64.so.1 /opt/bin/hyperkube kubectl "$@"; }

                    INSTANCE_ID=$(metadata meta-data/instance-id)
                    REGION=$(metadata dynamic/instance-identity/document | jq -r .region)
                    [ -n "${REGION}" ]

                    # Not customizable, for now
                    POLL_INTERVAL=10

                    # Used to identify the source which requested the instance termination
                    termination_source=''

                    # Instance termination detection loop
                    while sleep ${POLL_INTERVAL}; do

                      # Spot instance termination check
                      http_status=$(curl -o /dev/null -w '%{http_code}' -sL http://169.254.169.254/latest/meta-data/spot/termination-time)
                      if [ "${http_status}" -eq 200 ]; then
                        termination_source=spot
                        break
                      fi

                      # Termination ConfigMap check
                      if [ -e /etc/kube-node-drainer/asg ] && grep -q "${INSTANCE_ID}" /etc/kube-node-drainer/asg; then
                        termination_source=asg
                        break
                      fi
                    done

                    # Node draining loop
                    while true; do
                      echo Node is terminating, draining it...

                      if ! kubectl drain --ignore-daemonsets=true --delete-local-data=true --force=true --timeout=60s "${NODE_NAME}"; then
                        echo Not all pods on this host can be evicted, will try again
                        continue
                      fi
                      echo All evictable pods are gone

                      if [ "${termination_source}" == asg ]; then
                        echo Notifying AutoScalingGroup that instance ${INSTANCE_ID} can be shutdown
                        ASG_NAME=$(asg describe-auto-scaling-instances --instance-ids "${INSTANCE_ID}" | jq -r '.AutoScalingInstances[].AutoScalingGroupName')
                        HOOK_NAME=$(asg describe-lifecycle-hooks --auto-scaling-group-name "${ASG_NAME}" | jq -r '.LifecycleHooks[].LifecycleHookName' | grep -i nodedrainer)
                        asg complete-lifecycle-action --lifecycle-action-result CONTINUE --instance-id "${INSTANCE_ID}" --lifecycle-hook-name "${HOOK_NAME}" --auto-scaling-group-name "${ASG_NAME}"
                      fi

                      # Expect instance will be shut down in 5 minutes
                      sleep 300
                    done
                  volumeMounts:
                  - mountPath: /opt/bin
                    name: workdir
                  - mountPath: /etc/kube-node-drainer
                    name: kube-node-drainer-status
                    readOnly: true
              volumes:
              - name: workdir
                emptyDir: {}
              - name: kube-node-drainer-status
                projected:
                  sources:
                  - configMap:
                      name: kube-node-drainer-status
                      optional: true
{{end}}

  # TODO: remove the following binding once the TLS Bootstrapping feature is enabled by default, see:
  # https://github.com/kubernetes-incubator/kube-aws/pull/618#discussion_r115162048
  # https://kubernetes.io/docs/admin/authorization/rbac/#core-component-roles

  # Makes kube-worker user behave like a regular member of system:nodes group,
  # needed when TLS bootstrapping is disabled
  - path: /srv/kubernetes/rbac/cluster-role-bindings/node.yaml
    content: |
        kind: ClusterRoleBinding
        apiVersion: rbac.authorization.k8s.io/v1beta1
        metadata:
          name: kube-aws:node
        subjects:
          - kind: User
            name: kube-worker
        roleRef:
          kind: ClusterRole
          name: system:node
          apiGroup: rbac.authorization.k8s.io

  # We need to give nodes a few extra permissions so that both the node
  # draining and node labeling with AWS metadata work as expected
  - path: /srv/kubernetes/rbac/cluster-roles/node-extensions.yaml
    content: |
        kind: ClusterRole
        apiVersion: rbac.authorization.k8s.io/v1beta1
        metadata:
            name: kube-aws:node-extensions
        rules:
          - apiGroups: ["extensions"]
            resources:
            - daemonsets
            verbs:
            - get
          # Can be removed if node authorizer is enabled
          - apiGroups: [""]
            resources:
            - nodes
            verbs:
            - patch
            - update
          - apiGroups: ["extensions"]
            resources:
            - replicasets
            verbs:
            - get
          - apiGroups: ["batch"]
            resources:
            - jobs
            verbs:
            - get
          - apiGroups: [""]
            resources:
            - replicationcontrollers
            verbs:
            - get
          - apiGroups: [""]
            resources:
            - pods/eviction
            verbs:
            - create
          - nonResourceURLs: ["*"]
            verbs: ["*"]

  # Grants super-user permissions to the kube-admin user
  - path: /srv/kubernetes/rbac/cluster-role-bindings/kube-admin.yaml
    content: |
        kind: ClusterRoleBinding
        apiVersion: rbac.authorization.k8s.io/v1beta1
        metadata:
          name: kube-aws:admin
        subjects:
          - kind: User
            name: kube-admin
        roleRef:
          kind: ClusterRole
          name: cluster-admin
          apiGroup: rbac.authorization.k8s.io

  # Also allows `kube-worker` user to perform actions needed by the
  # `kube-proxy` component.
  - path: /srv/kubernetes/rbac/cluster-role-bindings/node-proxier.yaml
    content: |
        kind: ClusterRoleBinding
        apiVersion: rbac.authorization.k8s.io/v1beta1
        metadata:
          name: kube-aws:node-proxier
        subjects:
          - kind: User
            name: kube-worker
          - kind: ServiceAccount
            name: kube-proxy
            namespace: kube-system
          # Not needed after migrating to DaemonSet-based kube-proxy
          - kind: Group
            name: system:nodes
        roleRef:
          kind: ClusterRole
          name: system:node-proxier
          apiGroup: rbac.authorization.k8s.io

  # Allows add-ons running with the default service account in kube-sytem to have super-user access
  - path: /srv/kubernetes/rbac/cluster-role-bindings/system-worker.yaml
    content: |
        kind: ClusterRoleBinding
        apiVersion: rbac.authorization.k8s.io/v1beta1
        metadata:
          name: kube-aws:system-worker
        subjects:
          - kind: ServiceAccount
            namespace: kube-system
            name: default
        roleRef:
          kind: ClusterRole
          name: cluster-admin
          apiGroup: rbac.authorization.k8s.io

  # TODO: remove the following binding once the TLS Bootstrapping feature is enabled by default, see:
  # https://github.com/kubernetes-incubator/kube-aws/pull/618#discussion_r115162048
  # https://kubernetes.io/docs/admin/authorization/rbac/#core-component-roles

  # Associates the add-on role `kube-aws:node-extensions` to all nodes, so that
  # extra kube-aws features (like node draining) work as expected
  - path: /srv/kubernetes/rbac/cluster-role-bindings/node-extensions.yaml
    content: |
        kind: ClusterRoleBinding
        apiVersion: rbac.authorization.k8s.io/v1beta1
        metadata:
          name: kube-aws:node-extensions
        subjects:
          - kind: User
            name: kube-worker
          - kind: Group
            name: system:nodes
        roleRef:
          kind: ClusterRole
          name: kube-aws:node-extensions
          apiGroup: rbac.authorization.k8s.io

  # Allow heapster access to the built in cluster role via its service account
  - path: /srv/kubernetes/rbac/cluster-role-bindings/heapster.yaml
    content: |
        kind: ClusterRoleBinding
        apiVersion: rbac.authorization.k8s.io/v1beta1
        metadata:
          name: heapster
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: system:heapster
        subjects:
        - kind: ServiceAccount
          name: heapster
          namespace: kube-system
{{/* RUN-578 Introduce Dex */}}
{{if .Experimental.Oidc.Enabled}}
  - path: /srv/kubernetes/manifests/dex-deployment.yaml.tmpl
    content: |
      apiVersion: extensions/v1beta1
      kind: Deployment
      metadata:
        name: dex
        namespace: kube-system
        labels:
          app: dex
          component: identity
        annotations:
          scheduler.alpha.kubernetes.io/critical-pod: ''
      spec:
        replicas: 1
        minReadySeconds: 30
        strategy:
          rollingUpdate:
            maxUnavailable: 0
        template:
          metadata:
            name: dex
            labels:
              app: dex
              component: identity
            annotations:
              hcom-dex-configmap-hash: ''
          spec:
            volumes:
            - name: config
              configMap:
                name: dex
                items:
                - key: config.yaml
                  path: config.yaml
            - name: tls
              secret:
                secretName: dex.kube-system.tls
            containers:
            - name: dex
              imagePullPolicy: IfNotPresent
              image: {{ default "181651482125.dkr.ecr.us-west-2.amazonaws.com/hotels/dex:2.7.0" .CustomSettings.Dex.ImageWithTag }}
              command: ["/usr/local/bin/dex", "serve", "/etc/dex/config.yaml"]
              volumeMounts:
              - name: config
                mountPath: /etc/dex
              - name: tls
                mountPath: /etc/dex/tls
              ports:
              - name: https
                containerPort: 5556
                protocol: TCP
              env:
              - name: D
                value: 'Yerecharu$-qU5!C'
              resources:
                requests:
                  cpu: 100m
                  memory: 50Mi
                limits:
                  cpu: 100m
                  memory: 50Mi

  - path: /srv/kubernetes/manifests/dex-svc.yaml
    content: |
      ---
      apiVersion: v1
      kind: Service
      metadata:
        name: dex
        namespace: kube-system
      spec:
        type: NodePort
        ports:
          - name: dex
            port: 5556
            protocol: TCP
            targetPort: 5556
            nodePort: 31000
        selector:
          app: dex

  - path: /srv/kubernetes/manifests/dex-cm.yaml
    content: |
      kind: ConfigMap
      apiVersion: v1
      metadata:
        name: dex
        namespace: kube-system
      data:
        config.yaml: |
          issuer: {{.Experimental.Oidc.IssuerUrl}}
          storage:
            type: kubernetes
            config:
              inCluster: true
              {{- if .CustomSettings.Dex.UseTPR }}
              useTPR: true
              {{- end }}
          web:
            https: 0.0.0.0:5556
            routePrefix: /dex
            tlsCert: /etc/dex/tls/tls.crt
            tlsKey: /etc/dex/tls/tls.key
          logger:
            level: "debug"
            format: "json"

          connectors:
          - type: ldap
            name: OpenLDAP
            id: ldap
            config:
              host: {{ .CustomSettings.Dex.LDAPServerWithPort }}
              # No TLS for this setup.
              insecureNoSSL: true

              # This would normally be a read-only user.
              bindDN: {{ .CustomSettings.Dex.BindDN }}
              bindPW: ${D}

              userSearch:
                baseDN: {{ .CustomSettings.Dex.UserSearchBaseDN }}
                filter: "(objectClass=user)"
                username: sAMAccountName
                idAttr: DN
                emailAttr: mail
                nameAttr: sAMAccountName
              groupSearch:
                baseDN: {{ .CustomSettings.Dex.GroupSearchBaseDN }}
                filter: "(objectClass=group)"
                userAttr: DN
                groupAttr: member
                nameAttr: cn
          oauth2:
              skipApprovalScreen: true

          staticClients:
          - id: konveyor
            redirectURIs:
              - 'http://127.0.0.1:0/callback'
            name: 'konveyor'
            secret: ZXhhbXBsZS1hcHAtc2VjcmV1

  - path: /srv/kubernetes/rbac/cluster-role-bindings/dex.yaml
    content: |
        ---
        kind: ClusterRole
        apiVersion: rbac.authorization.k8s.io/v1beta1
        metadata:
          name: dex-proxy-access
        rules:
        - apiGroups: [""]
          resources:
          - services/proxy
          verbs: ["get", "create"]
        ---
        kind: ClusterRoleBinding
        apiVersion: rbac.authorization.k8s.io/v1beta1
        metadata:
          name: dex-anonymous-auth
          namespace: kube-system
        subjects:
        - kind: Group
          name: system:unauthenticated
          namespace: kube-system
          apiGroup: rbac.authorization.k8s.io
        roleRef:
          kind: ClusterRole
          name: dex-proxy-access
          apiGroup: rbac.authorization.k8s.io
        ---
        kind: ClusterRoleBinding
        apiVersion: rbac.authorization.k8s.io/v1beta1
        metadata:
          name: runtimeplatfom
        subjects:
        - kind: Group
          name: Hcom Tech RuntimePlatform
          apiGroup: rbac.authorization.k8s.io
        roleRef:
          kind: ClusterRole
          name: cluster-admin
          apiGroup: rbac.authorization.k8s.io
{{ end }}
{{/* RUN-578 Introduce Dex */}}
  # Heapster's pod_nanny monitors the heapster deployment & its pod(s), and scales
  # the resources of the deployment if necessary.
  - path: /srv/kubernetes/rbac/roles/pod-nanny.yaml
    content: |
        apiVersion: rbac.authorization.k8s.io/v1beta1
        kind: Role
        metadata:
          name: system:pod-nanny
          namespace: kube-system
          labels:
            kubernetes.io/cluster-service: "true"
            addonmanager.kubernetes.io/mode: Reconcile
        rules:
        - apiGroups:
          - ""
          resources:
          - pods
          verbs:
          - get
        - apiGroups:
          - "extensions"
          resources:
          - deployments
          verbs:
          - get
          - update

  # Allow heapster nanny access to the pod nanny role via its service account (same pod as heapster)
  - path: /srv/kubernetes/rbac/role-bindings/heapster-nanny.yaml
    content: |
        kind: RoleBinding
        apiVersion: rbac.authorization.k8s.io/v1beta1
        metadata:
          name: heapster-nanny
          namespace: kube-system
          labels:
            kubernetes.io/cluster-service: "true"
            addonmanager.kubernetes.io/mode: Reconcile
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: Role
          name: system:pod-nanny
        subjects:
        - kind: ServiceAccount
          name: heapster
          namespace: kube-system

{{ if .Experimental.TLSBootstrap.Enabled }}
  # A ClusterRole which instructs the CSR approver to approve a user requesting
  # node client credentials.
  - path: /srv/kubernetes/rbac/cluster-roles/kubelet-certificate-bootstrap.yaml
    content: |
        kind: ClusterRole
        apiVersion: rbac.authorization.k8s.io/v1beta1
        metadata:
          name: kube-aws:kubelet-certificate-bootstrap
        rules:
        - apiGroups:
          - certificates.k8s.io
          resources:
          - certificatesigningrequests/nodeclient
          verbs:
          - create

  # Approve all CSRs for the group "system:kubelet-bootstrap-token"
  - path: /srv/kubernetes/rbac/cluster-role-bindings/kubelet-certificate-bootstrap.yaml
    content: |
        kind: ClusterRoleBinding
        apiVersion: rbac.authorization.k8s.io/v1beta1
        metadata:
          name: kube-aws:kubelet-certificate-bootstrap
        subjects:
        - kind: Group
          name: system:kubelet-bootstrap
          apiGroup: rbac.authorization.k8s.io
        roleRef:
          kind: ClusterRole
          name: kube-aws:kubelet-certificate-bootstrap
          apiGroup: rbac.authorization.k8s.io

  # Only allows certificate signing requests to be performed with the bootstrap token
  - path: /srv/kubernetes/rbac/cluster-roles/node-bootstrapper.yaml
    content: |
        kind: ClusterRole
        apiVersion: rbac.authorization.k8s.io/v1beta1
        metadata:
          name: kube-aws:node-bootstrapper
        rules:
          - apiGroups:
              - certificates.k8s.io
            resources:
              - certificatesigningrequests
            verbs:
            - create
            - get
            - list
            - watch

  - path: /srv/kubernetes/rbac/cluster-role-bindings/node-bootstrapper.yaml
    content: |
        kind: ClusterRoleBinding
        apiVersion: rbac.authorization.k8s.io/v1beta1
        metadata:
          name: kube-aws:node-bootstrapper
        subjects:
          - kind: Group
            namespace: '*'
            name: system:kubelet-bootstrap
        roleRef:
          kind: ClusterRole
          name: kube-aws:node-bootstrapper
          apiGroup: rbac.authorization.k8s.io
{{ end }}

  #kubernetes dashboard
  - path: /srv/kubernetes/rbac/roles/kubernetes-dashboard.yaml
    content: |
        kind: Role
        apiVersion: rbac.authorization.k8s.io/v1beta1
        metadata:
          name: kubernetes-dashboard-minimal
          namespace: kube-system
        rules:
        - apiGroups: [""]
          resources: ["secrets"]
          verbs: ["create", "watch"]
        - apiGroups: [""]
          resources: ["secrets"]
          resourceNames: ["kubernetes-dashboard-key-holder", "kubernetes-dashboard-certs"]
          verbs: ["get", "update", "delete"]
        - apiGroups: [""]
          resources: ["services"]
          resourceNames: ["heapster"]
          verbs: ["proxy"]

  - path: /srv/kubernetes/rbac/role-bindings/kubernetes-dashboard.yaml
    content: |
        apiVersion: rbac.authorization.k8s.io/v1beta1
        kind: RoleBinding
        metadata:
          name: kubernetes-dashboard-minimal
          namespace: kube-system
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: Role
          name: kubernetes-dashboard-minimal
        subjects:
        - kind: ServiceAccount
          name: kubernetes-dashboard
          namespace: kube-system

{{ if .KubeDashboardAdminPrivileges }}
  - path: /srv/kubernetes/rbac/cluster-role-bindings/kubernetes-dashboard-admin.yaml
    content: |
        apiVersion: rbac.authorization.k8s.io/v1beta1
        kind: ClusterRoleBinding
        metadata:
          name: kubernetes-dashboard
          labels:
            k8s-app: kubernetes-dashboard
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: cluster-admin
        subjects:
        - kind: ServiceAccount
          name: kubernetes-dashboard
          namespace: kube-system
{{ end }}
  - path: /srv/kubernetes/manifests/kube-proxy-cm.yaml
    content: |
      kind: ConfigMap
      apiVersion: v1
      metadata:
        name: kube-proxy-config
        namespace: kube-system
      data:
        kube-proxy-config.yaml: |
          apiVersion: componentconfig/v1alpha1
          kind: KubeProxyConfiguration
          bindAddress: 0.0.0.0
          clientConnection:
            kubeconfig: /etc/kubernetes/kubeconfig/kube-proxy.yaml
          clusterCIDR: {{.PodCIDR}}

  - path: /srv/kubernetes/manifests/kube-proxy-ds.yaml
    content: |
        apiVersion: extensions/v1beta1
        kind: DaemonSet
        metadata:
          name: kube-proxy
          namespace: kube-system
          labels:
            k8s-app: kube-proxy
          annotations:
            rkt.alpha.kubernetes.io/stage1-name-override: coreos.com/rkt/stage1-fly
        spec:
          updateStrategy:
            type: RollingUpdate
          template:
            metadata:
              labels:
                k8s-app: kube-proxy
              annotations:
                scheduler.alpha.kubernetes.io/critical-pod: ''
            spec:
              serviceAccountName: kube-proxy
              tolerations:
              - operator: Exists
                effect: NoSchedule
              - operator: Exists
                effect: NoExecute
              - operator: Exists
                key: CriticalAddonsOnly
              hostNetwork: true
              containers:
              - name: kube-proxy
                image: {{.HyperkubeImage.RepoWithTag}}
                command:
                - /hyperkube
                - proxy
                - --config=/etc/kubernetes/kube-proxy/kube-proxy-config.yaml
                securityContext:
                  privileged: true
                volumeMounts:
                - mountPath: /etc/kubernetes/kubeconfig
                  name: kubeconfig
                  readOnly: true
                - mountPath: /etc/kubernetes/kube-proxy
                  name: kube-proxy-config
                  readOnly: true
              volumes:
              - name: kubeconfig
                hostPath:
                  path: /etc/kubernetes/kubeconfig
              - name: kube-proxy-config
                configMap:
                  name: kube-proxy-config

  - path: /etc/kubernetes/manifests/kube-apiserver.yaml
    content: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: kube-apiserver
        namespace: kube-system
        labels:
          k8s-app: kube-apiserver
      spec:
        hostNetwork: true
        containers:
        - name: kube-apiserver
          image: {{.HyperkubeImage.RepoWithTag}}
          command:
          - /hyperkube
          - apiserver
{{/* RUN Enable verbose logging */}}
          - --v=3
{{/* RUN Enable verbose logging */}}
          - --apiserver-count={{if .MinControllerCount}}{{ .MinControllerCount }}{{else}}{{ .ControllerCount }}{{end}}
          - --bind-address=0.0.0.0
          - --etcd-servers=#ETCD_ENDPOINTS#
          - --etcd-cafile=/etc/kubernetes/ssl/etcd-trusted-ca.pem
          - --etcd-certfile=/etc/kubernetes/ssl/etcd-client.pem
          - --etcd-keyfile=/etc/kubernetes/ssl/etcd-client-key.pem
          - --allow-privileged=true
          - --service-cluster-ip-range={{.ServiceCIDR}}
          - --secure-port=443
          {{if .Etcd.Version.Is3}}
          - --storage-backend=etcd3
          {{else}}
          - --storage-backend=etcd2
          {{end}}
          - --kubelet-preferred-address-types=InternalIP,Hostname,ExternalIP
          {{if or (.AssetsConfig.HasAuthTokens) ( and .Experimental.TLSBootstrap.Enabled .AssetsConfig.HasTLSBootstrapToken)}}
          - --token-auth-file=/etc/kubernetes/auth/tokens.csv
          {{ end }}
          {{if .Experimental.AuditLog.Enabled}}
          - --audit-log-maxage={{.Experimental.AuditLog.MaxAge}}
          - --audit-log-path={{.Experimental.AuditLog.LogPath}}
          - --audit-log-maxbackup=1
          - --audit-policy-file=/etc/kubernetes/apiserver/audit-policy.yaml
          {{ end }}
          - --authorization-mode={{if .Experimental.NodeAuthorizer.Enabled}}Node,{{end}}RBAC
          {{if .Experimental.Authentication.Webhook.Enabled}}
          - --authentication-token-webhook-config-file=/etc/kubernetes/webhooks/authentication.yaml
          - --authentication-token-webhook-cache-ttl={{ .Experimental.Authentication.Webhook.CacheTTL }}
          {{ end }}
          - --advertise-address=$private_ipv4
          - --admission-control=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass{{if .Experimental.Admission.PodSecurityPolicy.Enabled}},PodSecurityPolicy{{ end }}{{if .Experimental.Admission.AlwaysPullImages.Enabled}},AlwaysPullImages{{ end }}{{if .Experimental.NodeAuthorizer.Enabled}},NodeRestriction{{end}},ResourceQuota{{if .Experimental.Admission.DenyEscalatingExec.Enabled}},DenyEscalatingExec{{end}}{{if .Experimental.Admission.Initializers.Enabled}},Initializers{{end}}
{{/* RUN-578 Introduce Dex */}}
          {{if .Experimental.Oidc.Enabled}}
          - --anonymous-auth=true
          {{else}}
          - --anonymous-auth=false
          {{ end -}}
{{/* RUN-578 Introduce Dex */}}
          {{if .Experimental.Oidc.Enabled}}
          - --oidc-issuer-url={{.Experimental.Oidc.IssuerUrl}}
          - --oidc-client-id={{.Experimental.Oidc.ClientId}}
          {{if .Experimental.Oidc.UsernameClaim}}
          - --oidc-username-claim={{.Experimental.Oidc.UsernameClaim}}
          {{ end -}}
          {{if .Experimental.Oidc.GroupsClaim}}
          - --oidc-groups-claim={{.Experimental.Oidc.GroupsClaim}}
          {{ end -}}
          {{ if .ManageCertificates}}
          - --oidc-ca-file=/etc/kubernetes/ssl/ca.pem
          {{ end -}}
          {{ end -}}
          - --cert-dir=/etc/kubernetes/ssl
          - --tls-cert-file=/etc/kubernetes/ssl/apiserver.pem
          - --tls-private-key-file=/etc/kubernetes/ssl/apiserver-key.pem
          - --client-ca-file=/etc/kubernetes/ssl/ca.pem
{{/* RUN-509 Remove vault-based certs DO NOT TOUCH THIS LINE */}}
          - --service-account-key-file=/etc/kubernetes/ssl/serviceaccount-key.pem.apiserver
{{/* RUN-509 Remove vault-based certs DO NOT TOUCH THIS LINE */}}
          - --runtime-config=extensions/v1beta1/networkpolicies=true,batch/v2alpha1,rbac.authorization.k8s.io/v1beta1=true{{if .Experimental.Admission.PodSecurityPolicy.Enabled}},extensions/v1beta1/podsecuritypolicy=true{{ end }}{{if .Experimental.Admission.Initializers.Enabled}},admissionregistration.k8s.io/v1alpha1{{end}}
          - --cloud-provider=aws
{{/* RUN Attempt to prevent apiserver->etcd lockups. https://github.com/kubernetes/kubernetes/issues/47131#issuecomment-338166775 */}}
          - --service-account-lookup=false
{{/* RUN Attempt to prevent apiserver->etcd lockups. https://github.com/kubernetes/kubernetes/issues/47131#issuecomment-338166775 */}}
          {{range $f := .APIServerFlags}}
          - --{{$f.Name}}={{$f.Value}}
          {{ end -}}
          livenessProbe:
            httpGet:
              host: 127.0.0.1
              port: 8080
              path: /healthz
            initialDelaySeconds: 15
            timeoutSeconds: 15
          ports:
          - containerPort: 443
            hostPort: 443
            name: https
          - containerPort: 8080
            hostPort: 8080
            name: local
          volumeMounts:
          - mountPath: /etc/kubernetes/ssl
            name: ssl-certs-kubernetes
            readOnly: true
          - mountPath: /etc/ssl/certs
            name: ssl-certs-host
            readOnly: true
          {{if or (.AssetsConfig.HasAuthTokens) ( and .Experimental.TLSBootstrap.Enabled .AssetsConfig.HasTLSBootstrapToken)}}
          - mountPath: /etc/kubernetes/auth
            name: auth-kubernetes
            readOnly: true
          {{end}}
          {{if .Experimental.Authentication.Webhook.Enabled}}
          - mountPath: /etc/kubernetes/webhooks
            name: kubernetes-webhooks
            readOnly: true
          {{end}}
          {{if .Experimental.AuditLog.Enabled}}
          - mountPath: /var/log
            name: var-log
            readOnly: false
          - mountPath: /etc/kubernetes/apiserver
            name: apiserver
            readOnly: true
          {{end}}
          {{range $v := .APIServerVolumes}}
          - mountPath: {{quote $v.Path}}
            name: {{quote $v.Name}}
            readOnly: {{$v.ReadOnly}}
          {{end}}
        volumes:
        - hostPath:
            path: /etc/kubernetes/ssl
          name: ssl-certs-kubernetes
        - hostPath:
            path: /usr/share/ca-certificates
          name: ssl-certs-host
        {{if or (.AssetsConfig.HasAuthTokens) ( and .Experimental.TLSBootstrap.Enabled .AssetsConfig.HasTLSBootstrapToken)}}
        - hostPath:
            path: /etc/kubernetes/auth
          name: auth-kubernetes
        {{end}}
        {{if .Experimental.Authentication.Webhook.Enabled}}
        - hostPath:
            path: /etc/kubernetes/webhooks
          name: kubernetes-webhooks
        {{end}}
        {{if .Experimental.AuditLog.Enabled}}
        - hostPath:
            path: /var/log
          name: var-log
        - hostPath:
            path: /etc/kubernetes/apiserver
          name: apiserver
        {{end}}
        {{range $v := .APIServerVolumes}}
        - hostPath:
            path: {{quote $v.Path}}
          name: {{quote $v.Name}}
        {{end}}

  - path: /etc/kubernetes/manifests/kube-controller-manager.yaml
    content: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: kube-controller-manager
        namespace: kube-system
        labels:
          k8s-app: kube-controller-manager
      spec:
        containers:
        - name: kube-controller-manager
          image: {{.HyperkubeImage.RepoWithTag}}
          command:
          - /hyperkube
          - controller-manager
{{/* RUN Enable verbose logging */}}
          - --v=3
{{/* RUN Enable verbose logging */}}
          - --master=http://127.0.0.1:8080
          - --leader-elect=true
{{/* RUN-509 Remove vault-based certs DO NOT TOUCH THIS LINE */}}
          - --service-account-private-key-file=/etc/kubernetes/ssl/serviceaccount-key.pem.controller
{{/* RUN-509 Remove vault-based certs DO NOT TOUCH THIS LINE */}}
          {{ if .Experimental.TLSBootstrap.Enabled }}
          - --insecure-experimental-approve-all-kubelet-csrs-for-group=system:kubelet-bootstrap
          - --cluster-signing-cert-file=/etc/kubernetes/ssl/worker-ca.pem
          - --cluster-signing-key-file=/etc/kubernetes/ssl/worker-ca-key.pem
          {{ end }}
          - --root-ca-file=/etc/kubernetes/ssl/ca.pem
          - --cloud-provider=aws
          {{if .Experimental.NodeMonitorGracePeriod}}
          - --node-monitor-grace-period={{ .Experimental.NodeMonitorGracePeriod }}
          {{end}}
          {{if .Experimental.DisableSecurityGroupIngress}}
          - --cloud-config=/etc/kubernetes/additional-configs/cloud.config
          {{end}}
          resources:
            requests:
              cpu: 200m
          livenessProbe:
            httpGet:
              host: 127.0.0.1
              path: /healthz
              port: 10252
            initialDelaySeconds: 15
            timeoutSeconds: 15
          volumeMounts:
          {{if .Experimental.DisableSecurityGroupIngress}}
          - mountPath: /etc/kubernetes/additional-configs
            name: additional-configs
            readOnly: true
          {{end}}
          - mountPath: /etc/kubernetes/ssl
            name: ssl-certs-kubernetes
            readOnly: true
          - mountPath: /etc/ssl/certs
            name: ssl-certs-host
            readOnly: true
        hostNetwork: true
        volumes:
        {{if .Experimental.DisableSecurityGroupIngress}}
        - hostPath:
            path: /etc/kubernetes/additional-configs
          name: additional-configs
        {{end}}
        - hostPath:
            path: /etc/kubernetes/ssl
          name: ssl-certs-kubernetes
        - hostPath:
            path: /usr/share/ca-certificates
          name: ssl-certs-host

  - path: /etc/kubernetes/manifests/kube-scheduler.yaml
    content: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: kube-scheduler
        namespace: kube-system
        labels:
          k8s-app: kube-scheduler
      spec:
        hostNetwork: true
        containers:
        - name: kube-scheduler
          image: {{.HyperkubeImage.RepoWithTag}}
          command:
          - /hyperkube
          - scheduler
          - --master=http://127.0.0.1:8080
          - --leader-elect=true
          resources:
            requests:
              cpu: 100m
          livenessProbe:
            httpGet:
              host: 127.0.0.1
              path: /healthz
              port: 10251
            initialDelaySeconds: 15
            timeoutSeconds: 15

  {{- if .Addons.Rescheduler.Enabled }}
  - path: /srv/kubernetes/manifests/kube-rescheduler-de.yaml
    content: |
      apiVersion: extensions/v1beta1
      kind: Deployment
      metadata:
        name: kube-rescheduler
        namespace: kube-system
        labels:
          k8s-app: kube-rescheduler
          kubernetes.io/cluster-service: "true"
          kubernetes.io/name: "Rescheduler"
      spec:
        # `replicas` should always be the default of 1, rescheduler crashes otherwise
        template:
          metadata:
            labels:
              k8s-app: kube-rescheduler
            annotations:
              scheduler.alpha.kubernetes.io/critical-pod: ''
          spec:
            tolerations:
            - key: "CriticalAddonsOnly"
              operator: "Exists"
            hostNetwork: true
            containers:
            - name: kube-rescheduler
              image: {{ .KubeReschedulerImage.RepoWithTag }}
              resources:
                requests:
                  cpu: 10m
                  memory: 100Mi
  {{- end }}

  - path: /srv/kubernetes/manifests/kube-proxy-sa.yaml
    content: |
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: kube-proxy
          namespace: kube-system
          labels:
            kubernetes.io/cluster-service: "true"

  - path: /srv/kubernetes/manifests/kube-dns-sa.yaml
    content: |
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: kube-dns
          namespace: kube-system
          labels:
            kubernetes.io/cluster-service: "true"

  - path: /srv/kubernetes/manifests/kube-dns-cm.yaml
    content: |
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: kube-dns
          namespace: kube-system

  - path: /srv/kubernetes/manifests/kube-dns-autoscaler-de.yaml
    content: |
        apiVersion: extensions/v1beta1
        kind: Deployment
        metadata:
          name: kube-dns-autoscaler
          namespace: kube-system
          labels:
            k8s-app: kube-dns-autoscaler
            kubernetes.io/cluster-service: "true"
        spec:
          template:
            metadata:
              labels:
                k8s-app: kube-dns-autoscaler
              annotations:
                scheduler.alpha.kubernetes.io/critical-pod: ''
            spec:
              tolerations:
              - key: "CriticalAddonsOnly"
                operator: "Exists"
              containers:
              - name: autoscaler
                image: {{ .ClusterProportionalAutoscalerImage.RepoWithTag }}
                resources:
                    requests:
                        cpu: "20m"
                        memory: "10Mi"
                command:
                  - /cluster-proportional-autoscaler
                  - --namespace=kube-system
                  - --configmap=kube-dns-autoscaler
                  - --target=Deployment/kube-dns
                  - --default-params={"linear":{"coresPerReplica":256,"nodesPerReplica":16,"min":2}}
                  - --logtostderr=true
                  - --v=2

{{ if .KubeDns.NodeLocalResolver }}
  - path: /srv/kubernetes/manifests/dnsmasq-node-ds.yaml
    content: |
        apiVersion: extensions/v1beta1
        kind: DaemonSet
        metadata:
          name: dnsmasq-node
          namespace: kube-system
          labels:
            k8s-app: dnsmasq-node
        spec:
          updateStrategy:
            type: RollingUpdate
          template:
            metadata:
              labels:
                k8s-app: dnsmasq-node
              annotations:
                scheduler.alpha.kubernetes.io/critical-pod: ''
            spec:
              tolerations:
              - operator: Exists
                effect: NoSchedule
              - operator: Exists
                effect: NoExecute
              - operator: Exists
                key: CriticalAddonsOnly
              volumes:
              - name: kube-dns-config
                configMap:
                  name: kube-dns
                  optional: true
              containers:
              - name: dnsmasq
                image: {{ .KubeDnsMasqImage.RepoWithTag }}
                livenessProbe:
                  httpGet:
                    path: /healthcheck/dnsmasq
                    port: 10054
                    scheme: HTTP
                  initialDelaySeconds: 60
                  timeoutSeconds: 5
                  successThreshold: 1
                  failureThreshold: 5
                args:
                - -v=2
                - -logtostderr
                - -configDir=/etc/k8s/dns/dnsmasq-nanny
                - -restartDnsmasq=true
                - --
                - -k
                - --cache-size=1000
                - --server=/cluster.local/{{.DNSServiceIP}}
                - --server=/in-addr.arpa/{{.DNSServiceIP}}
                - --server=/ip6.arpa/{{.DNSServiceIP}}
                - --log-facility=-
                ports:
                - containerPort: 53
                  name: dns
                  protocol: UDP
                - containerPort: 53
                  name: dns-tcp
                  protocol: TCP
                # see: https://github.com/kubernetes/kubernetes/issues/29055 for details
                resources:
                  requests:
                    cpu: 150m
                    memory: 20Mi
                volumeMounts:
                - name: kube-dns-config
                  mountPath: /etc/k8s/dns/dnsmasq-nanny
              - name: sidecar
                image: {{ .DnsMasqMetricsImage.RepoWithTag }}
                livenessProbe:
                  httpGet:
                    path: /metrics
                    port: 10054
                    scheme: HTTP
                  initialDelaySeconds: 60
                  timeoutSeconds: 5
                  successThreshold: 1
                  failureThreshold: 5
                args:
                - --v=2
                - --logtostderr
                - --probe=dnsmasq,127.0.0.1:53,ec2.amazonaws.com,5,A
                ports:
                - containerPort: 10054
                  name: metrics
                  protocol: TCP
                resources:
                  requests:
                    memory: 20Mi
              hostNetwork: true
              dnsPolicy: Default
              automountServiceAccountToken: false
{{ end }}

  - path: /srv/kubernetes/manifests/kube-dns-de.yaml
    content: |
        apiVersion: extensions/v1beta1
        kind: Deployment
        metadata:
          name: kube-dns
          namespace: kube-system
          labels:
            k8s-app: kube-dns
            kubernetes.io/cluster-service: "true"
        spec:
          # replicas: not specified here:
          # 1. In order to make Addon Manager do not reconcile this replicas parameter.
          # 2. Default is 1.
          # 3. Will be tuned in real time if DNS horizontal auto-scaling is turned on.
          strategy:
            rollingUpdate:
              maxSurge: 10%
              maxUnavailable: 0
          selector:
            matchLabels:
              k8s-app: kube-dns
          template:
            metadata:
              labels:
                k8s-app: kube-dns
              annotations:
                scheduler.alpha.kubernetes.io/critical-pod: ''
            spec:
              volumes:
              - name: kube-dns-config
                configMap:
                  name: kube-dns
                  optional: true
              tolerations:
              - key: "CriticalAddonsOnly"
                operator: "Exists"
              containers:
              - name: kubedns
                image: {{ .KubeDnsImage.RepoWithTag }}
                resources:
                  limits:
                    memory: 170Mi
                  requests:
                    cpu: 100m
                    memory: 70Mi
                livenessProbe:
                  httpGet:
                    path: /healthcheck/kubedns
                    port: 10054
                    scheme: HTTP
                  initialDelaySeconds: 60
                  timeoutSeconds: 5
                  successThreshold: 1
                  failureThreshold: 5
                readinessProbe:
                  httpGet:
                    path: /readiness
                    port: 8081
                    scheme: HTTP
                  initialDelaySeconds: 3
                  timeoutSeconds: 5
                args:
                - --domain=cluster.local.
                - --dns-port=10053
                - --config-dir=/kube-dns-config
                # This should be set to v=2 only after the new image (cut from 1.5) has
                # been released, otherwise we will flood the logs.
                - --v=2
                env:
                - name: PROMETHEUS_PORT
                  value: "10055"
                ports:
                - containerPort: 10053
                  name: dns-local
                  protocol: UDP
                - containerPort: 10053
                  name: dns-tcp-local
                  protocol: TCP
                - containerPort: 10055
                  name: metrics
                  protocol: TCP
                volumeMounts:
                - name: kube-dns-config
                  mountPath: /kube-dns-config
              - name: dnsmasq
                image: {{ .KubeDnsMasqImage.RepoWithTag }}
                livenessProbe:
                  httpGet:
                    path: /healthcheck/dnsmasq
                    port: 10054
                    scheme: HTTP
                  initialDelaySeconds: 60
                  timeoutSeconds: 5
                  successThreshold: 1
                  failureThreshold: 5
                args:
                - -v=2
                - -logtostderr
                - -configDir=/etc/k8s/dns/dnsmasq-nanny
                - -restartDnsmasq=true
                - --
                - -k
                - --cache-size=1000
                - --log-facility=-
                - --server=/cluster.local/127.0.0.1#10053
                - --server=/in-addr.arpa/127.0.0.1#10053
                - --server=/ip6.arpa/127.0.0.1#10053
                ports:
                - containerPort: 53
                  name: dns
                  protocol: UDP
                - containerPort: 53
                  name: dns-tcp
                  protocol: TCP
                # see: https://github.com/kubernetes/kubernetes/issues/29055 for details
                resources:
                  requests:
                    cpu: 150m
                    memory: 20Mi
                volumeMounts:
                - name: kube-dns-config
                  mountPath: /etc/k8s/dns/dnsmasq-nanny
              - name: sidecar
                image: {{ .DnsMasqMetricsImage.RepoWithTag }}
                livenessProbe:
                  httpGet:
                    path: /metrics
                    port: 10054
                    scheme: HTTP
                  initialDelaySeconds: 60
                  timeoutSeconds: 5
                  successThreshold: 1
                  failureThreshold: 5
                args:
                - --v=2
                - --logtostderr
                - --probe=kubedns,127.0.0.1:10053,kubernetes.default.svc.cluster.local,5,A
                - --probe=dnsmasq,127.0.0.1:53,kubernetes.default.svc.cluster.local,5,A
                ports:
                - containerPort: 10054
                  name: metrics
                  protocol: TCP
                resources:
                  requests:
                    memory: 20Mi
                    cpu: 10m
              dnsPolicy: Default
              serviceAccountName: kube-dns

  - path: /srv/kubernetes/manifests/kube-dns-svc.yaml
    content: |
        apiVersion: v1
        kind: Service
        metadata:
          name: kube-dns
          namespace: kube-system
          labels:
            k8s-app: kube-dns
            kubernetes.io/cluster-service: "true"
            kubernetes.io/name: "KubeDNS"
        spec:
          selector:
            k8s-app: kube-dns
          clusterIP: {{.DNSServiceIP}}
          ports:
          - name: dns
            port: 53
            protocol: UDP
          - name: dns-tcp
            port: 53
            protocol: TCP

  - path: /srv/kubernetes/manifests/heapster-sa.yaml
    content: |
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: heapster
          namespace: kube-system
          labels:
            kubernetes.io/cluster-service: "true"

  - path: /srv/kubernetes/manifests/heapster-de.yaml
    content: |
        apiVersion: extensions/v1beta1
        kind: Deployment
        metadata:
          name: heapster
          namespace: kube-system
          labels:
            k8s-app: heapster
            kubernetes.io/cluster-service: "true"
            version: v1.4.1
        spec:
          replicas: 1
          selector:
            matchLabels:
              k8s-app: heapster
              version: v1.4.1
          template:
            metadata:
              labels:
                k8s-app: heapster
                version: v1.4.1
              annotations:
                scheduler.alpha.kubernetes.io/critical-pod: ''
            spec:
              tolerations:
              - key: "CriticalAddonsOnly"
                operator: "Exists"
              serviceAccountName: heapster
              containers:
                - image: {{ .HeapsterImage.RepoWithTag }}
                  name: heapster
                  livenessProbe:
                    httpGet:
                      path: /healthz
                      port: 8082
                      scheme: HTTP
                    initialDelaySeconds: 180
                    timeoutSeconds: 5
                  resources:
                    limits:
                      cpu: 80m
                      memory: 200Mi
                    requests:
                      cpu: 80m
                      memory: 200Mi
                  command:
                    - /heapster
                    - --source=kubernetes.summary_api:''
                - image: {{ .AddonResizerImage.RepoWithTag }}
                  name: heapster-nanny
                  resources:
                    limits:
                      cpu: 50m
                      memory: 90Mi
                    requests:
                      cpu: 50m
                      memory: 90Mi
                  env:
                    - name: MY_POD_NAME
                      valueFrom:
                        fieldRef:
                          fieldPath: metadata.name
                    - name: MY_POD_NAMESPACE
                      valueFrom:
                        fieldRef:
                          fieldPath: metadata.namespace
                  command:
                    - /pod_nanny
                    - --cpu=80m
                    - --extra-cpu=4m
                    - --memory=200Mi
                    - --extra-memory=4Mi
                    - --deployment=heapster
                    - --container=heapster
                    - --poll-period=300000

  {{if .Addons.ClusterAutoscaler.Enabled}}
  - path: /srv/kubernetes/manifests/cluster-autoscaler-de.yaml
    content: |
        apiVersion: extensions/v1beta1
        kind: Deployment
        metadata:
          name: cluster-autoscaler
          namespace: kube-system
          labels:
            app: cluster-autoscaler
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: cluster-autoscaler
          template:
            metadata:
              labels:
                app: cluster-autoscaler
              annotations:
                scheduler.alpha.kubernetes.io/critical-pod: ''
            spec:
              affinity:
                nodeAffinity:
                  requiredDuringSchedulingIgnoredDuringExecution:
                    nodeSelectorTerms:
                    - matchExpressions:
                      - key: "kube-aws.coreos.com/cluster-autoscaler-supported"
                        operator: "In"
                        values:
                        - "true"
              tolerations:
              - key: "node.alpha.kubernetes.io/role"
                operator: "Equal"
                value: "master"
                effect: "NoSchedule"
              - key: "CriticalAddonsOnly"
                operator: "Exists"
              containers:
                - image: {{ .ClusterAutoscalerImage.RepoWithTag }}
                  name: cluster-autoscaler
                  resources:
                    limits:
                      cpu: 100m
                      memory: 300Mi
                    requests:
                      cpu: 100m
                      memory: 300Mi
                  command:
                    - ./cluster-autoscaler
                    - --v=4
                    - --stderrthreshold=info
                    - --cloud-provider=aws
                    - --skip-nodes-with-local-storage=false
                    - --expander=least-waste
                    - --node-group-auto-discovery=asg:tag=k8s.io/cluster-autoscaler/enabled,kubernetes.io/cluster/{{.ClusterName}}
                  env:
                    - name: AWS_REGION
                      value: {{.Region}}
                  imagePullPolicy: "Always"
  {{end}}

  - path: /srv/kubernetes/manifests/heapster-svc.yaml
    content: |
        kind: Service
        apiVersion: v1
        metadata:
          name: heapster
          namespace: kube-system
          labels:
            kubernetes.io/cluster-service: "true"
            kubernetes.io/name: "Heapster"
            k8s-app: heapster
        spec:
          ports:
            - port: 80
              targetPort: 8082
          selector:
            k8s-app: heapster

  - path: /srv/kubernetes/manifests/kubernetes-dashboard-se.yaml
    content: |
        apiVersion: v1
        kind: Secret
        metadata:
          labels:
            k8s-app: kubernetes-dashboard
          name: kubernetes-dashboard-certs
          namespace: kube-system
        type: Opaque

  - path: /srv/kubernetes/manifests/kubernetes-dashboard-sa.yaml
    content: |
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          labels:
            k8s-app: kubernetes-dashboard
          name: kubernetes-dashboard
          namespace: kube-system

  - path: /srv/kubernetes/manifests/kubernetes-dashboard-de.yaml
    content: |
        kind: Deployment
        apiVersion: extensions/v1beta1
        metadata:
          labels:
            k8s-app: kubernetes-dashboard
          name: kubernetes-dashboard
          namespace: kube-system
        spec:
          replicas: 1
          revisionHistoryLimit: 10
          selector:
            matchLabels:
              k8s-app: kubernetes-dashboard
          template:
            metadata:
              labels:
                k8s-app: kubernetes-dashboard
            spec:
              initContainers:
              - name: kubernetes-dashboard-init
                image: {{ .KubeDashboardInitImage.RepoWithTag }}
                volumeMounts:
                - name: kubernetes-dashboard-certs
                  mountPath: /certs
              containers:
              - name: kubernetes-dashboard
                image: {{ .KubeDashboardImage.RepoWithTag }}
                ports:
                - containerPort: 9090
                  protocol: TCP
                args:
                  - --tls-key-file=/certs/dashboard.key
                  - --tls-cert-file=/certs/dashboard.crt
                volumeMounts:
                - name: kubernetes-dashboard-certs
                  mountPath: /certs
                  readOnly: true
                - mountPath: /tmp
                  name: tmp-volume
                livenessProbe:
                  httpGet:
                    scheme: HTTPS
                    path: /
                    port: 8443
                  initialDelaySeconds: 30
                  timeoutSeconds: 30
              volumes:
              - name: kubernetes-dashboard-certs
                secret:
                  secretName: kubernetes-dashboard-certs
              - name: tmp-volume
                emptyDir: {}
              serviceAccountName: kubernetes-dashboard
              tolerations:
              - key: "node.alpha.kubernetes.io/role"
                operator: "Equal"
                value: "master"
                effect: "NoSchedule"
              - key: "CriticalAddonsOnly"
                operator: "Exists"

  - path: /srv/kubernetes/manifests/kubernetes-dashboard-svc.yaml
    content: |
        kind: Service
        apiVersion: v1
        metadata:
          labels:
            k8s-app: kubernetes-dashboard
          name: kubernetes-dashboard
          namespace: kube-system
        spec:
          ports:
            - port: 443
              targetPort: 8443
          selector:
            k8s-app: kubernetes-dashboard

  - path: /srv/kubernetes/manifests/tiller.yaml
    content: |
        apiVersion: extensions/v1beta1
        kind: Deployment
        metadata:
          creationTimestamp: null
          labels:
            app: helm
            name: tiller
          name: tiller-deploy
          namespace: kube-system
        spec:
          strategy: {}
          template:
            metadata:
              creationTimestamp: null
              labels:
                app: helm
                name: tiller
              # Addition to the default tiller deployment for prioritizing tiller over other non-critical pods with rescheduler
              annotations:
                scheduler.alpha.kubernetes.io/critical-pod: ''
            spec:
              tolerations:
              # Additions to the default tiller deployment for allowing to schedule tiller onto controller nodes
              # so that helm can be used to install pods running only on controller nodes
              - key: "node.alpha.kubernetes.io/role"
                operator: "Equal"
                value: "master"
                effect: "NoSchedule"
              - key: "CriticalAddonsOnly"
                operator: "Exists"
              containers:
              - env:
                - name: TILLER_NAMESPACE
                  value: kube-system
                image: {{.TillerImage.RepoWithTag}}
                imagePullPolicy: IfNotPresent
                livenessProbe:
                  httpGet:
                    path: /liveness
                    port: 44135
                  initialDelaySeconds: 1
                  timeoutSeconds: 1
                name: tiller
                ports:
                - containerPort: 44134
                  name: tiller
                readinessProbe:
                  httpGet:
                    path: /readiness
                    port: 44135
                  initialDelaySeconds: 1
                  timeoutSeconds: 1
                resources: {}
              nodeSelector:
                beta.kubernetes.io/os: linux
        status: {}
        ---
        apiVersion: v1
        kind: Service
        metadata:
          creationTimestamp: null
          labels:
            app: helm
            name: tiller
          name: tiller-deploy
          namespace: kube-system
        spec:
          ports:
          - name: tiller
            port: 44134
            targetPort: tiller
          selector:
            app: helm
            name: tiller
          type: ClusterIP
        status:
          loadBalancer: {}

{{/* RUN-605 Add Flyte */}}
{{ if .CustomSettings.Flyte.Enabled }}
  - path: /srv/kubernetes/manifests/flyte-konveyor.yaml
    content: |

        apiVersion: extensions/v1beta1
        kind: Deployment
        metadata:
          name: flyte-konveyor
          namespace: kube-public
        spec:
          replicas: {{ default 1 .CustomSettings.Flyte.Replicas }}
          template:
            metadata:
              labels:
                app: flyte-konveyor
            spec:
              containers:
              - name: flyte-konveyor
                image: {{ default "181651482125.dkr.ecr.us-west-2.amazonaws.com/hotels/fkp:latest" .CustomSettings.Flyte.ImageWithTag }}
                imagePullPolicy: Always
                env:
                - name: FLYTE_HOST
                  value: {{ default "http://flyte.hcom" .CustomSettings.Flyte.HostUrl }}
                - name: FLYTE_ENVIRONMENT
                  value: {{ .ClusterName }}
                - name: VAULT_ADDR
                  value: {{ .CustomSettings.vault.address }}
                volumeMounts:
                - mountPath: /konveyor
                  name: logs
                  readOnly: false
              volumes:
              - name: logs
                hostPath:
                  path: /logs/konveyor
{{ end }}
{{/* RUN-605 Add Flyte */}}

  - path: {{.KubernetesManifestPlugin.ManifestListFile.Path}}
    encoding: gzip+base64
    content: {{.KubernetesManifestPlugin.ManifestListFile.Content.ToGzip.ToBase64}}

{{ range $m := .KubernetesManifestPlugin.Manifests }}
{{ $f := $m.ManifestFile }}
  - path: {{$f.Path}}
    encoding: gzip+base64
    content: {{$f.Content.ToGzip.ToBase64}}
{{ end }}

  - path: {{.HelmReleasePlugin.ReleaseListFile.Path}}
    encoding: gzip+base64
    content: {{.HelmReleasePlugin.ReleaseListFile.Content.ToGzip.ToBase64}}


{{ range $r := .HelmReleasePlugin.Releases }}
{{ $f := $r.ReleaseFile }}
  - path: {{$f.Path}}
    encoding: gzip+base64
    content: {{$f.Content.ToGzip.ToBase64}}
{{ $f := $r.ValuesFile }}
  - path: {{$f.Path}}
    encoding: gzip+base64
    content: {{$f.Content.ToGzip.ToBase64}}
{{ end }}

{{ if .AssetsConfig.HasTLSBootstrapToken }}
  - path: /etc/kubernetes/auth/kubelet-tls-bootstrap-token.tmp{{if .AssetsEncryptionEnabled}}.enc{{end}}
    encoding: gzip+base64
    content: {{.AssetsConfig.TLSBootstrapToken}}
{{ end }}

{{ if .AssetsConfig.HasAuthTokens }}
  - path: /etc/kubernetes/auth/tokens.csv.tmp{{if .AssetsEncryptionEnabled}}.enc{{end}}
    encoding: gzip+base64
    content: {{.AssetsConfig.AuthTokens}}
{{ end }}

{{ if .ManageCertificates }}
  - path: /etc/kubernetes/ssl/ca.pem
    encoding: gzip+base64
    content: {{.AssetsConfig.CACert}}

{{ if .Experimental.TLSBootstrap.Enabled }}
  - path: /etc/kubernetes/ssl/worker-ca-key.pem.enc
    encoding: gzip+base64
    content: {{.AssetsConfig.WorkerCAKey}}

  - path: /etc/kubernetes/ssl/worker-ca.pem
    encoding: gzip+base64
    content: {{.AssetsConfig.WorkerCACert}}
{{ end }}

  - path: /etc/kubernetes/ssl/apiserver.pem
    encoding: gzip+base64
    content: {{.AssetsConfig.APIServerCert}}

  - path: /etc/kubernetes/ssl/apiserver-key.pem{{if .AssetsEncryptionEnabled}}.enc{{end}}
    encoding: gzip+base64
    content: {{.AssetsConfig.APIServerKey}}

  - path: /etc/kubernetes/ssl/etcd-client.pem
    encoding: gzip+base64
    content: {{.AssetsConfig.EtcdClientCert}}

  - path: /etc/kubernetes/ssl/etcd-client-key.pem{{if .AssetsEncryptionEnabled}}.enc{{end}}
    encoding: gzip+base64
    content: {{.AssetsConfig.EtcdClientKey}}

  - path: /etc/kubernetes/ssl/etcd-trusted-ca.pem
    encoding: gzip+base64
    content: {{.AssetsConfig.EtcdTrustedCA}}

{{ if .Experimental.Oidc.Enabled }}
  - path: /etc/kubernetes/ssl/oidc.pem
    encoding: gzip+base64
    content: {{.AssetsConfig.OidcCert}}

  - path: /etc/kubernetes/ssl/oidc-key.pem{{if .AssetsEncryptionEnabled}}.enc{{end}}
    encoding: gzip+base64
    content: {{.AssetsConfig.OidcKey}}
{{ end }}
{{ end }}

  # File needed on every node (used by the kube-proxy DaemonSet), including controllers
  - path: /etc/kubernetes/kubeconfig/kube-proxy.yaml
    content: |
        apiVersion: v1
        kind: Config
        clusters:
        - name: default
          cluster:
            server: http://localhost:8080
        users:
        - name: default
          user:
            tokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
        contexts:
        - context:
            cluster: default
            user: default
          name: default
        current-context: default

  - path: /etc/kubernetes/kubeconfig/controller.yaml
    content: |
        apiVersion: v1
        kind: Config
        clusters:
        - name: local
          cluster:
            server: http://localhost:8080
        users:
        - name: kubelet
        contexts:
        - context:
            cluster: local
            user: kubelet
          name: kubelet-context
        current-context: kubelet-context

{{ if not .UseCalico }}
  - path: /etc/kubernetes/cni/net.d/10-flannel.conf
    content: |
        {
            "name": "podnet",
            "type": "flannel",
            "delegate": {
                "isDefaultGateway": true
            }
        }

{{ else }}

  - path: /etc/kubernetes/cni/net.d/10-calico.conf
    content: |
      {
        "name": "calico",
        "type": "flannel",
        "delegate": {
          "type": "calico",
          "etcd_endpoints": "#ETCD_ENDPOINTS#",
          "etcd_key_file": "/etc/kubernetes/ssl/etcd-client-key.pem",
          "etcd_cert_file": "/etc/kubernetes/ssl/etcd-client.pem",
          "etcd_ca_cert_file": "/etc/kubernetes/ssl/etcd-trusted-ca.pem",
          "log_level": "info",
          "policy": {
            "type": "k8s",
            "k8s_api_root": "http://127.0.0.1:8080/api/v1/"
          }
        }
      }

{{ end }}

# AdvancedAuditing is enabled by default since K8S v1.8.
# With AdvancedAuditing, you have to provide a audit policy file.
# Otherwise no audit logs are recorded at all.
{{if .Experimental.AuditLog.Enabled -}}
  # Refer to the audit profile used by GCE
  # https://github.com/kubernetes/kubernetes/blob/v1.8.3/cluster/gce/gci/configure-helper.sh#L517
  - path: /etc/kubernetes/apiserver/audit-policy.yaml
    owner: root:root
    permissions: 0600
    content: |
      apiVersion: audit.k8s.io/v1beta1
      kind: Policy
      rules:
        # The following requests were manually identified as high-volume and low-risk,
        # so drop them.
        - level: None
          users: ["system:kube-proxy"]
          verbs: ["watch"]
          resources:
            - group: "" # core
              resources: ["endpoints", "services", "services/status"]
        - level: None
          # Ingress controller reads `configmaps/ingress-uid` through the unsecured port.
          # TODO(#46983): Change this to the ingress controller service account.
          users: ["system:unsecured"]
          namespaces: ["kube-system"]
          verbs: ["get"]
          resources:
            - group: "" # core
              resources: ["configmaps"]
        - level: None
          users: ["kubelet"] # legacy kubelet identity
          verbs: ["get"]
          resources:
            - group: "" # core
              resources: ["nodes", "nodes/status"]
        - level: None
          userGroups: ["system:nodes"]
          verbs: ["get"]
          resources:
            - group: "" # core
              resources: ["nodes", "nodes/status"]
        - level: None
          users:
            - system:kube-controller-manager
            - system:kube-scheduler
            - system:serviceaccount:kube-system:endpoint-controller
          verbs: ["get", "update"]
          namespaces: ["kube-system"]
          resources:
            - group: "" # core
              resources: ["endpoints"]
        - level: None
          users: ["system:apiserver"]
          verbs: ["get"]
          resources:
            - group: "" # core
              resources: ["namespaces", "namespaces/status", "namespaces/finalize"]
        # Don't log HPA fetching metrics.
        - level: None
          users:
            - system:kube-controller-manager
          verbs: ["get", "list"]
          resources:
            - group: "metrics.k8s.io"
        # Don't log these read-only URLs.
        - level: None
          nonResourceURLs:
            - /healthz*
            - /version
            - /swagger*
        # Don't log events requests.
        - level: None
          resources:
            - group: "" # core
              resources: ["events"]
        # Secrets, ConfigMaps, and TokenReviews can contain sensitive & binary data,
        # so only log at the Metadata level.
        - level: Metadata
          resources:
            - group: "" # core
              resources: ["secrets", "configmaps"]
            - group: authentication.k8s.io
              resources: ["tokenreviews"]
          omitStages:
            - "RequestReceived"
        # Get responses can be large; skip them.
        - level: Request
          verbs: ["get", "list", "watch"]
          resources:
            - group: "" # core
            - group: "admissionregistration.k8s.io"
            - group: "apiextensions.k8s.io"
            - group: "apiregistration.k8s.io"
            - group: "apps"
            - group: "authentication.k8s.io"
            - group: "authorization.k8s.io"
            - group: "autoscaling"
            - group: "batch"
            - group: "certificates.k8s.io"
            - group: "extensions"
            - group: "metrics.k8s.io"
            - group: "networking.k8s.io"
            - group: "policy"
            - group: "rbac.authorization.k8s.io"
            - group: "settings.k8s.io"
            - group: "storage.k8s.io"
          omitStages:
            - "RequestReceived"
        # Default level for known APIs
        - level: RequestResponse
          resources:
            - group: "" # core
            - group: "admissionregistration.k8s.io"
            - group: "apiextensions.k8s.io"
            - group: "apiregistration.k8s.io"
            - group: "apps"
            - group: "authentication.k8s.io"
            - group: "authorization.k8s.io"
            - group: "autoscaling"
            - group: "batch"
            - group: "certificates.k8s.io"
            - group: "extensions"
            - group: "metrics.k8s.io"
            - group: "networking.k8s.io"
            - group: "policy"
            - group: "rbac.authorization.k8s.io"
            - group: "settings.k8s.io"
            - group: "storage.k8s.io"
          omitStages:
            - "RequestReceived"
        # Default level for all other requests.
        - level: Metadata
          omitStages:
            - "RequestReceived"
{{ end -}}

{{/* RUN-509 Remove vault-based certs */}}
  - path: /opt/bin/check-pod-serviceaccount-secrets
    permissions: 0755
    content: |
      #!/bin/bash

      KUBEPATH=/etc/kubernetes/serviceaccount-secret/
      mkdir -p ${KUBEPATH}

      # Get the current serviceaccount secret
      SECRET=$( /kubectl get serviceaccount default --namespace=kube-system --output=json | jq -e --raw-output '.secrets[0].name' )
      echo $SECRET > ${KUBEPATH}secret-name

      # Produce a list of pods that reference any serviceaccount secret other than the current serviceaccount secret
      /kubectl get pods --namespace=kube-system --output=json | jq --arg good_tokens "$SECRET" '[ .items[]
        | { podName: .metadata.name, serviceAccountTokens: [.spec.containers[].volumeMounts[]?]
        | [map(select(.mountPath == "/var/run/secrets/kubernetes.io/serviceaccount"))[].name] | unique } ]
        | map(select((.serviceAccountTokens - [$good_tokens]) | length > 0)) '


  - path: /opt/bin/rotate-serviceaccount-secret
    permissions: 0755
    content: |
      #!/bin/bash

      KUBEPATH=/etc/kubernetes/serviceaccount-secret/
      SECRET_ID=$(cat ${KUBEPATH}secret-name)

      # Get latest secret id
      /opt/bin/check-pod-serviceaccount-secrets

      # Remove secret (new one is regenerated)
      /kubectl delete secret ${SECRET_ID} --namespace=kube-system

      # Trigger rolling-updates
      /kubectl patch --namespace kube-system deployment kube-dns -p   "{\"spec\":{\"template\":{\"metadata\":{\"labels\":{\"date\":\"`date +'%s'`\"}}}}}"
      /kubectl patch --namespace kube-system deployment calico-policy-controller -p   "{\"spec\":{\"template\":{\"metadata\":{\"labels\":{\"date\":\"`date +'%s'`\"}}}}}"
      /kubectl patch --namespace kube-system deployment heapster-v1.2.0 -p   "{\"spec\":{\"template\":{\"metadata\":{\"labels\":{\"date\":\"`date +'%s'`\"}}}}}"
      /kubectl patch --namespace kube-system deployment kube-dns-autoscaler -p   "{\"spec\":{\"template\":{\"metadata\":{\"labels\":{\"date\":\"`date +'%s'`\"}}}}}"
      /kubectl replace --namespace kube-system daemonset calico-node -p   "{\"spec\":{\"template\":{\"metadata\":{\"labels\":{\"date\":\"`date +'%s'`\"}}}}}"
{{/* RUN-509 Remove vault-based certs */}}

{{if .Experimental.Authentication.Webhook.Enabled}}
  - path: /etc/kubernetes/webhooks/authentication.yaml
    encoding: base64
    content: {{ .Experimental.Authentication.Webhook.Config }}
{{ end }}

{{ if .SharedPersistentVolume }}
  - path: /opt/bin/load-efs-pv
    owner: root:root
    permissions: 0700
    content: |
      #!/bin/bash -e

      docker run --rm --net=host \
        -v /etc/kubernetes:/etc/kubernetes \
        -v /etc/resolv.conf:/etc/resolv.conf \
        {{ .HyperkubeImage.RepoWithTag }} /bin/bash \
          -vxec \
          'echo "Starting Loading EFS Persistent Volume"
           /kubectl create -f /etc/kubernetes/efs-pv.yaml
           echo "Finished Loading EFS Persistent Volume"'

{{ end }}
{{if .Experimental.Kube2IamSupport.Enabled }}
  - path: /srv/kubernetes/manifests/kube2iam-ds.yaml
    content: |
      apiVersion: extensions/v1beta1
      kind: DaemonSet
      metadata:
        name: kube2iam
        namespace: kube-system
        labels:
          app: kube2iam
        annotations:
          scheduler.alpha.kubernetes.io/critical-pod: ''
      spec:
        updateStrategy:
          type: RollingUpdate
        template:
          metadata:
            labels:
              name: kube2iam
          spec:
            serviceAccountName: kube2iam
            hostNetwork: true
            tolerations:
            - operator: Exists
              effect: NoSchedule
            - operator: Exists
              effect: NoExecute
            - operator: Exists
              key: CriticalAddonsOnly
            containers:
              - image: {{.Kube2IAMImage.RepoWithTag}}
                name: kube2iam
                args:
                  - "--app-port=8282"
                  - "--auto-discover-base-arn"
                  - "--auto-discover-default-role"
                  - "--iptables=true"
                  - "--host-ip=$(HOST_IP)"
           {{- if .UseCalico }}
                  - "--host-interface=cali+"
           {{else}}
                  - "--host-interface=cni0"
           {{- end }}
                env:
                  - name: HOST_IP
                    valueFrom:
                      fieldRef:
                        fieldPath: status.podIP
                ports:
                  - containerPort: 8282
                    hostPort: 8282
                    name: http
                resources:
                  limits:
                    cpu: 10m
                    memory: 32Mi
                  requests:
                    cpu: 10m
                    memory: 32Mi
                securityContext:
                  privileged: true
  - path: /srv/kubernetes/manifests/kube2iam-rbac.yaml
    content: |
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: kube2iam
        namespace: kube-system
      ---

      apiVersion: rbac.authorization.k8s.io/v1beta1
      kind: ClusterRole
      metadata:
        annotations:
          rbac.authorization.kubernetes.io/autoupdate: "true"
        labels:
          kubernetes.io/bootstrapping: kube2iam
        name: kube2iam
      rules:
      - apiGroups:
        - ""
        resources:
        - pods
        - namespaces
        verbs:
        - get
        - list
        - watch
      ---

      apiVersion: rbac.authorization.k8s.io/v1beta1
      kind: ClusterRoleBinding
      metadata:
        name: kube2iam
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: kube2iam
      subjects:
      - kind: ServiceAccount
        name: kube2iam
        namespace: kube-system
{{end}}

  - path: /opt/bin/retry
    owner: root:root
    permissions: 0755
    content: |
      #!/bin/bash
      max_attempts="$1"; shift
      cmd="$@"
      attempt_num=1
      attempt_interval_sec=3

      until $cmd
      do
          if (( attempt_num == max_attempts ))
          then
              echo "Attempt $attempt_num failed and there are no more attempts left!"
              return 1
          else
              echo "Attempt $attempt_num failed! Trying again in $attempt_interval_sec seconds..."
              ((attempt_num++))
              sleep $attempt_interval_sec;
          fi
      done

  {{if .Experimental.AuditLog.Enabled -}}
  # Check worker communication by searching audit logs
  - path: /opt/bin/check-worker-communication
    permissions: 0700
    owner: root:root
    content: |
      #!/bin/bash -e
      set -ue

      AUDIT_LOG_PATH="{{.Experimental.AuditLog.LogPath}}"

      kubectl() {
        /usr/bin/docker run --rm --net=host -v /srv/kubernetes:/srv/kubernetes {{.HyperkubeImage.RepoWithTag}} /hyperkube kubectl "$@"
      }

      queryserver() {
        echo "Checking to see if workers are communicating with API server."
        auditlogs | grep -v 127.0.0.1 | grep kubelet | jq -c 'select(.responseStatus.code == 200)' --exit-status
      }

      auditlogs() {
        if [ "$AUDIT_LOG_PATH" == "/dev/stdout" ]; then
          # Let `docker logs` gather logs for periods slightly longer than the delay between `queryserver` calls
          # so that we won't drop any lines.
          docker logs --since 11s ${DOCKERIMAGE} |& cat
        else
          cat "$AUDIT_LOG_PATH"
        fi
      }

      #This checks whether there are any nodes other than controllers. If there is, this indicates it is a cluster update, if there is not, is a fresh cluster.
      #If it is an update, we check whether the workers can communicate with the API server before reporting success.

      kubectl get nodes 2>/dev/null
      RC=$?
      if [[ $RC -gt 0 ]]; then
        echo "No nodes present, assuming API server not yet ready, cannot verify cluster is up."
        exit 1
      fi

      NUM_WORKERS=$(kubectl get nodes -l node-role.kubernetes.io/master!="" 2>/dev/null)
      if [[ -z ${NUM_WORKERS} ]]; then
        echo "Fresh cluster, not checking for existing workers."
        exit 0
      else
        #We first retrieve the name of the image which is running the api-server, and then search its logs for any mentions of kubelet with a 200 response.

        DOCKERIMAGE=$(docker ps | grep -i k8s_kube-apiserver_kube-apiserver | awk '{print $1}')
        until queryserver; do echo "Worker communication failed, retrying." && sleep 10; done
        echo "Communication with workers has been established."
      fi
  {{end -}}

{{ end }}
